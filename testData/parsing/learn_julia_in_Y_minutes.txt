FILE
  PsiComment(LINE_COMMENT)('# Functions return the value of their last statement')
  PsiElement(EOL)('\n')
  JuliaStatementsImpl(STATEMENTS)
    JuliaFunctionImpl(FUNCTION)
      PsiElement(FUNCTION_KEYWORD)('function')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('add')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('x')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('y')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('x is ')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(SHORT_INTERPOLATE_SYM)('$')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('x')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)(' and y is ')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(SHORT_INTERPOLATE_SYM)('$')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('y')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
        JuliaPlusLevelOpImpl(PLUS_LEVEL_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('x')
          JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
            PsiElement(PLUS_SYM)('+')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('y')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    JuliaTypeDeclarationImpl(TYPE_DECLARATION)
      PsiElement(TYPE_KEYWORD)('type')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Lion')
      PsiElement(SUBTYPE_SYM)('<:')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Cat')
        PsiElement(LEFT_BRACKET)('(')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaAssignOpImpl(ASSIGN_OP)
          JuliaTypeOpImpl(TYPE_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('mane_color')
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Cat')
          PsiElement(EQ_SYM)('=')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('Cat')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    JuliaIntegerImpl(INTEGER)
      PsiElement(INT_LITERAL)('3')
    PsiComment(LINE_COMMENT)('# => 3 (Int64)')
    PsiElement(EOL)('\n')
    JuliaFloatLitImpl(FLOAT_LIT)
      PsiElement(FLOAT_LITERAL)('3.2')
    PsiComment(LINE_COMMENT)('# => 3.2 (Float64)')
    PsiElement(EOL)('\n')
    JuliaPlusLevelOpImpl(PLUS_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
        PsiElement(PLUS_SYM)('+')
      JuliaImplicitMultiplyOpImpl(IMPLICIT_MULTIPLY_OP)
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('im')
    PsiComment(LINE_COMMENT)('# => 2 + 1im (Complex{Int64})')
    PsiElement(EOL)('\n')
    JuliaFractionOpImpl(FRACTION_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      PsiElement(FRACTION_SYM)('//')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('3')
    PsiComment(LINE_COMMENT)('# => 2//3 (Rational{Int64})')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# All of the normal infix operators are available.')
    PsiElement(EOL)('\n')
    JuliaPlusLevelOpImpl(PLUS_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
      JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
        PsiElement(PLUS_SYM)('+')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
    PsiComment(LINE_COMMENT)('# => 2')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Enforce precedence with parentheses')
    PsiElement(EOL)('\n')
    JuliaMultiplyLevelOpImpl(MULTIPLY_LEVEL_OP)
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaPlusLevelOpImpl(PLUS_LEVEL_OP)
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
          JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
            PsiElement(PLUS_SYM)('+')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('3')
        PsiElement(RIGHT_BRACKET)(')')
      JuliaMultiplyLevelOperatorImpl(MULTIPLY_LEVEL_OPERATOR)
        PsiElement(MULTIPLY_SYM)('*')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
    PsiComment(LINE_COMMENT)('# => 8')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Bitwise Operators')
    PsiElement(EOL)('\n')
    JuliaBitWiseNotOpImpl(BIT_WISE_NOT_OP)
      PsiElement(BITWISE_NOT_SYM)('~')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
    PsiComment(LINE_COMMENT)('# => -3   # bitwise not')
    PsiElement(EOL)('\n')
    JuliaMultiplyLevelOpImpl(MULTIPLY_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('3')
      JuliaMultiplyLevelOperatorImpl(MULTIPLY_LEVEL_OPERATOR)
        PsiElement(BITWISE_AND_SYM)('&')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('5')
    PsiComment(LINE_COMMENT)('# => 1 # bitwise and')
    PsiElement(EOL)('\n')
    JuliaPlusLevelOpImpl(PLUS_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
        PsiElement(BITWISE_OR_SYM)('|')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('4')
    PsiComment(LINE_COMMENT)('# => 6 # bitwise or')
    PsiElement(EOL)('\n')
    JuliaPlusLevelOpImpl(PLUS_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
        PsiElement(INTERPOLATE_SYM)('$')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('4')
    PsiComment(LINE_COMMENT)('# => 6 # bitwise xor')
    PsiElement(EOL)('\n')
    JuliaBitwiseLevelOpImpl(BITWISE_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaBitwiseLevelOperatorImpl(BITWISE_LEVEL_OPERATOR)
        PsiElement(USHR_SYM)('>>>')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
    PsiComment(LINE_COMMENT)('# => 1 # logical shift right')
    PsiElement(EOL)('\n')
    JuliaBitwiseLevelOpImpl(BITWISE_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaBitwiseLevelOperatorImpl(BITWISE_LEVEL_OPERATOR)
        PsiElement(SHR_SYM)('>>')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
    PsiComment(LINE_COMMENT)('# => 1 # arithmetic shift right')
    PsiElement(EOL)('\n')
    JuliaBitwiseLevelOpImpl(BITWISE_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaBitwiseLevelOperatorImpl(BITWISE_LEVEL_OPERATOR)
        PsiElement(SHL_SYM)('<<')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
    PsiComment(LINE_COMMENT)('# => 4 # logical/arithmetic shift left')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# You can use the bits function to see the binary representation of a number.')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('bits')
      PsiElement(LEFT_BRACKET)('(')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('12345')
      PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => "0000000000000000000000000000000000000000000000000011000000111001"')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('bits')
      PsiElement(LEFT_BRACKET)('(')
      JuliaFloatLitImpl(FLOAT_LIT)
        PsiElement(FLOAT_LITERAL)('12345.0')
      PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => "0100000011001000000111001000000000000000000000000000000000000000"')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Boolean values are primitives')
    PsiElement(EOL)('\n')
    JuliaBooleanLitImpl(BOOLEAN_LIT)
      PsiElement(TRUE_KEYWORD)('true')
    PsiElement(EOL)('\n')
    JuliaBooleanLitImpl(BOOLEAN_LIT)
      PsiElement(FALSE_KEYWORD)('false')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Boolean operators')
    PsiElement(EOL)('\n')
    JuliaNotOpImpl(NOT_OP)
      PsiElement(NOT_SYM)('!')
      JuliaBooleanLitImpl(BOOLEAN_LIT)
        PsiElement(TRUE_KEYWORD)('true')
    PsiComment(LINE_COMMENT)('# => false')
    PsiElement(EOL)('\n')
    JuliaNotOpImpl(NOT_OP)
      PsiElement(NOT_SYM)('!')
      JuliaBooleanLitImpl(BOOLEAN_LIT)
        PsiElement(FALSE_KEYWORD)('false')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(EQUALS_SYM)('==')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(UNEQUAL_SYM)('!=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
    PsiComment(LINE_COMMENT)('# => false')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(LESS_THAN_SYM)('<')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('10')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(GREATER_THAN_SYM)('>')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('10')
    PsiComment(LINE_COMMENT)('# => false')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(LESS_THAN_OR_EQUAL_SYM)('<=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(GREATER_THAN_OR_EQUAL_SYM)('>=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Comparisons can be chained')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
        JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
          PsiElement(LESS_THAN_SYM)('<')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('2')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(LESS_THAN_SYM)('<')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('3')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Character literals are written with '')
    PsiElement(EOL)('\n')
    JuliaCharLitImpl(CHAR_LIT)
      PsiElement(CHAR_LITERAL)(''a'')
    PsiElement(EOL)('\n\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('This is a string')
        PsiElement(QUOTE_END)('"')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaExprWrapperImpl(EXPR_WRAPPER)
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 'T' # Julia indexes from 1')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# However, this is will not work well for UTF8 strings,')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# so iterating over strings is recommended (map, for loops, etc).')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# $ can be used for string interpolation:')
    PsiElement(EOL)('\n')
    JuliaStringImpl(STRING)
      PsiElement(QUOTE_START)('"')
      JuliaStringContentImpl(STRING_CONTENT)
        PsiElement(REGULAR_STRING_PART_LITERAL)('2 + 2 = ')
      JuliaTemplateImpl(TEMPLATE)
        PsiElement(STRING_INTERPOLATE_START)('$(')
        JuliaPlusLevelOpImpl(PLUS_LEVEL_OP)
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
          JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
            PsiElement(PLUS_SYM)('+')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
        PsiElement(STRING_INTERPOLATE_END)(')')
      PsiElement(QUOTE_END)('"')
    PsiComment(LINE_COMMENT)('# => "2 + 2 = 4"')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# You can put any Julia expression inside the parentheses.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Another way to format strings is the printf macro.')
    PsiElement(EOL)('\n')
    JuliaApplyMacroOpImpl(APPLY_MACRO_OP)
      JuliaMacroSymbolImpl(MACRO_SYMBOL)
        PsiElement(MACRO_SYM)('@printf')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('%d is less than %f')
        PsiElement(QUOTE_END)('"')
      JuliaFloatLitImpl(FLOAT_LIT)
        PsiElement(FLOAT_LITERAL)('4.5')
      JuliaFloatLitImpl(FLOAT_LIT)
        PsiElement(FLOAT_LITERAL)('5.3')
    PsiComment(LINE_COMMENT)('# 5 is less than 5.300000')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Printing is easy')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('println')
      PsiElement(LEFT_BRACKET)('(')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('I'm Julia. Nice to meet you!')
        PsiElement(QUOTE_END)('"')
      PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# String can be compared lexicographically')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('good')
        PsiElement(QUOTE_END)('"')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(GREATER_THAN_SYM)('>')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('bye')
        PsiElement(QUOTE_END)('"')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('good')
        PsiElement(QUOTE_END)('"')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(EQUALS_SYM)('==')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('good')
        PsiElement(QUOTE_END)('"')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('1 + 2 = 3')
        PsiElement(QUOTE_END)('"')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(EQUALS_SYM)('==')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('1 + 2 = ')
        JuliaTemplateImpl(TEMPLATE)
          PsiElement(STRING_INTERPOLATE_START)('$(')
          JuliaPlusLevelOpImpl(PLUS_LEVEL_OP)
            JuliaIntegerImpl(INTEGER)
              PsiElement(INT_LITERAL)('1')
            JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
              PsiElement(PLUS_SYM)('+')
            JuliaIntegerImpl(INTEGER)
              PsiElement(INT_LITERAL)('2')
          PsiElement(STRING_INTERPOLATE_END)(')')
        PsiElement(QUOTE_END)('"')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('## 2. Variables and Collections')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# You don't declare variables before assigning to them.')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('some_var')
      PsiElement(EQ_SYM)('=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('5')
    PsiComment(LINE_COMMENT)('# => 5')
    PsiElement(EOL)('\n')
    JuliaSymbolImpl(SYMBOL)
      PsiElement(SYM)('some_var')
    PsiComment(LINE_COMMENT)('# => 5')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Accessing a previously unassigned variable is an error')
    PsiElement(EOL)('\n')
    JuliaTryCatchImpl(TRY_CATCH)
      PsiElement(TRY_KEYWORD)('try')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('some_other_var')
        PsiComment(LINE_COMMENT)('# => ERROR: some_other_var not defined')
        PsiElement(EOL)('\n')
      JuliaCatchClauseImpl(CATCH_CLAUSE)
        PsiElement(CATCH_KEYWORD)('catch')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('e')
        PsiElement(EOL)('\n')
        JuliaStatementsImpl(STATEMENTS)
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('println')
            PsiElement(LEFT_BRACKET)('(')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('e')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Variable names start with a letter or underscore.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# After that, you can use letters, digits, underscores, and exclamation points.')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('SomeOtherVar123!')
      PsiElement(EQ_SYM)('=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('6')
    PsiComment(LINE_COMMENT)('# => 6')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# You can also use certain unicode characters')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('☃')
      PsiElement(EQ_SYM)('=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('8')
    PsiComment(LINE_COMMENT)('# => 8')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# These are especially handy for mathematical notation')
    PsiElement(EOL)('\n')
    JuliaMultiplyLevelOpImpl(MULTIPLY_LEVEL_OP)
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      JuliaMultiplyLevelOperatorImpl(MULTIPLY_LEVEL_OPERATOR)
        PsiElement(MULTIPLY_SYM)('*')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('π')
    PsiComment(LINE_COMMENT)('# => 6.283185307179586')
    PsiElement(EOL)('\n\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Int64')
        PsiElement(LEFT_M_BRACKET)('[')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 0-element Int64 Array')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('4')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('5')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('6')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 3-element Int64 Array: [4, 5, 6]')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('4')
        PsiElement(SEMICOLON_SYM)(';')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('5')
        PsiElement(SEMICOLON_SYM)(';')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('6')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 3-element Int64 Array: [4, 5, 6]')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaExprWrapperImpl(EXPR_WRAPPER)
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 4')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaEndImpl(END)
        PsiElement(END_KEYWORD)('end')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 6')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# 2-dimensional arrays use space-separated values and semicolon-separated rows.')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('matrix')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('2')
        PsiElement(SEMICOLON_SYM)(';')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('3')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('4')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 2x2 Int64 Array: [1 2; 3 4]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Arrays of a particular Type')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Int8')
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('4')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('5')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('6')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 3-element Int8 Array: [4, 5, 6]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Add stuff to the end of a list with push! and append!')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('push!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => [1]')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('push!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => [1,2]')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('push!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('4')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => [1,2,4]')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('push!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('3')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => [1,2,4,3]')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('append!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => [1,2,4,3,4,5,6]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Remove from the end with pop')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('pop!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 6 and b is now [4,5]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Let's put it back')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('push!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('6')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# b is now [4,5,6] again.')
    PsiElement(EOL)('\n\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaExprWrapperImpl(EXPR_WRAPPER)
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 1 # remember that Julia indexes from 1, not 0!')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# end is a shorthand for the last index. It can be used in any')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# indexing expression')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaEndImpl(END)
        PsiElement(END_KEYWORD)('end')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 6')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# we also have shift and unshift')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('shift!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 1 and a is now [2,4,3,4,5,6]')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('unshift!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('7')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => [7,2,4,3,4,5,6]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Function names that end in exclamations points indicate that they modify')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# their argument.')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('arr')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('5')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('4')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('6')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 3-element Int64 Array: [5,4,6]')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('sort')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('arr')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => [4,5,6]; arr is still [5,4,6]')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('sort!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('arr')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => [4,5,6]; arr is now [4,5,6]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Looking out of bounds is a BoundsError')
    PsiElement(EOL)('\n')
    JuliaTryCatchImpl(TRY_CATCH)
      PsiElement(TRY_KEYWORD)('try')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('a')
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaExprWrapperImpl(EXPR_WRAPPER)
            JuliaIntegerImpl(INTEGER)
              PsiElement(INT_LITERAL)('0')
          PsiElement(RIGHT_M_BRACKET)(']')
        PsiComment(LINE_COMMENT)('# => ERROR: BoundsError() in getindex at array.jl:270')
        PsiElement(EOL)('\n')
        JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('a')
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaPlusIndexingImpl(PLUS_INDEXING)
            JuliaEndImpl(END)
              PsiElement(END_KEYWORD)('end')
            JuliaPlusLevelOperatorImpl(PLUS_LEVEL_OPERATOR)
              PsiElement(PLUS_SYM)('+')
            JuliaExprWrapperImpl(EXPR_WRAPPER)
              JuliaIntegerImpl(INTEGER)
                PsiElement(INT_LITERAL)('1')
          PsiElement(RIGHT_M_BRACKET)(']')
        PsiComment(LINE_COMMENT)('# => ERROR: BoundsError() in getindex at array.jl:270')
        PsiElement(EOL)('\n')
      JuliaCatchClauseImpl(CATCH_CLAUSE)
        PsiElement(CATCH_KEYWORD)('catch')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('e')
        PsiElement(EOL)('\n')
        JuliaStatementsImpl(STATEMENTS)
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('println')
            PsiElement(LEFT_BRACKET)('(')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('e')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Errors list the line and file they came from, even if it's in the standard')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# library. If you built Julia from source, you can look in the folder base')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# inside the julia folder to find these files.')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# You can initialize arrays from ranges')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaRangeOpImpl(RANGE_OP)
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
          PsiElement(COLON_SYM)(':')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('5')
        PsiElement(SEMICOLON_SYM)(';')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 5-element Int64 Array: [1,2,3,4,5]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# You can look at ranges with slice syntax.')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaRangeIndexingImpl(RANGE_INDEXING)
        JuliaExprWrapperImpl(EXPR_WRAPPER)
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
        PsiElement(COLON_SYM)(':')
        JuliaExprWrapperImpl(EXPR_WRAPPER)
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('3')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => [1, 2, 3]')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaRangeIndexingImpl(RANGE_INDEXING)
        JuliaExprWrapperImpl(EXPR_WRAPPER)
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
        PsiElement(COLON_SYM)(':')
        JuliaExprWrapperImpl(EXPR_WRAPPER)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('end')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => [2, 3, 4, 5]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Remove elements from an array by index with splice!')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('arr')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('3')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('4')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('5')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('splice!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('arr')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 4 ; arr is now [3,5]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Concatenate lists with append!')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(EQ_SYM)('=')
      JuliaArrayImpl(ARRAY)
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('2')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('3')
        PsiElement(RIGHT_M_BRACKET)(']')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('append!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('b')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# Now a is [1, 2, 3, 4, 5, 1, 2, 3]')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Check for existence in a list with in')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaInAsOpImpl(IN_AS_OP)
        PsiElement(IN_KEYWORD)('in')
      PsiElement(LEFT_BRACKET)('(')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Examine the length with length')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('length')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 8')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Tuples are immutable.')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tup')
      PsiElement(EQ_SYM)('=')
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('2')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('3')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => (1,2,3) # an (Int64,Int64,Int64) tuple.')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tup')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaExprWrapperImpl(EXPR_WRAPPER)
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 1')
    PsiElement(EOL)('\n')
    JuliaTryCatchImpl(TRY_CATCH)
      PsiElement(TRY_KEYWORD)('try')
      JuliaStatementsImpl(STATEMENTS)
        JuliaQuoteOpImpl(QUOTE_OP)
          PsiElement(COLON_SYM)(':')
          PsiElement(EOL)('\n')
          JuliaAssignOpImpl(ASSIGN_OP)
            JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('tup')
              PsiElement(LEFT_M_BRACKET)('[')
              JuliaExprWrapperImpl(EXPR_WRAPPER)
                JuliaIntegerImpl(INTEGER)
                  PsiElement(INT_LITERAL)('1')
              PsiElement(RIGHT_M_BRACKET)(']')
            PsiElement(EQ_SYM)('=')
            JuliaIntegerImpl(INTEGER)
              PsiElement(INT_LITERAL)('3')
        PsiComment(LINE_COMMENT)('# => ERROR: no method setindex!((Int64,Int64,Int64),Int64,Int64)')
        PsiElement(EOL)('\n')
      JuliaCatchClauseImpl(CATCH_CLAUSE)
        PsiElement(CATCH_KEYWORD)('catch')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('e')
        PsiElement(EOL)('\n')
        JuliaStatementsImpl(STATEMENTS)
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('println')
            PsiElement(LEFT_BRACKET)('(')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('e')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Many list functions also work on tuples')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('length')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tup')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 3')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tup')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaRangeIndexingImpl(RANGE_INDEXING)
        JuliaExprWrapperImpl(EXPR_WRAPPER)
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
        PsiElement(COLON_SYM)(':')
        JuliaExprWrapperImpl(EXPR_WRAPPER)
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => (1,2)')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaInAsOpImpl(IN_AS_OP)
        PsiElement(IN_KEYWORD)('in')
      PsiElement(LEFT_BRACKET)('(')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tup')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# You can unpack tuples into variables')
    PsiElement(EOL)('\n')
    JuliaSymbolImpl(SYMBOL)
      PsiElement(SYM)('a')
    PsiElement(COMMA_SYM)(',')
    JuliaSymbolImpl(SYMBOL)
      PsiElement(SYM)('b')
    PsiElement(COMMA_SYM)(',')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('c')
      PsiElement(EQ_SYM)('=')
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('2')
        PsiElement(COMMA_SYM)(',')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('3')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => (1,2,3)  # a is now 1, b is now 2 and c is now 3')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Tuples are created even if you leave out the parentheses')
    PsiElement(EOL)('\n')
    JuliaSymbolImpl(SYMBOL)
      PsiElement(SYM)('d')
    PsiElement(COMMA_SYM)(',')
    JuliaSymbolImpl(SYMBOL)
      PsiElement(SYM)('e')
    PsiElement(COMMA_SYM)(',')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('f')
      PsiElement(EQ_SYM)('=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('4')
    PsiElement(COMMA_SYM)(',')
    JuliaIntegerImpl(INTEGER)
      PsiElement(INT_LITERAL)('5')
    PsiElement(COMMA_SYM)(',')
    JuliaIntegerImpl(INTEGER)
      PsiElement(INT_LITERAL)('6')
    PsiComment(LINE_COMMENT)('# => (4,5,6)')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# A 1-element tuple is distinct from the value it contains')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
        PsiElement(COMMA_SYM)(',')
        PsiElement(RIGHT_BRACKET)(')')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(EQUALS_SYM)('==')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
    PsiComment(LINE_COMMENT)('# => false')
    PsiElement(EOL)('\n')
    JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('1')
        PsiElement(RIGHT_BRACKET)(')')
      JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
        PsiElement(EQUALS_SYM)('==')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Look how easy it is to swap two values')
    PsiElement(EOL)('\n')
    JuliaSymbolImpl(SYMBOL)
      PsiElement(SYM)('e')
    PsiElement(COMMA_SYM)(',')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('d')
      PsiElement(EQ_SYM)('=')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('d')
    PsiElement(COMMA_SYM)(',')
    JuliaSymbolImpl(SYMBOL)
      PsiElement(SYM)('e')
    PsiComment(LINE_COMMENT)('# => (5,4) # d is now 5 and e is now 4')
    PsiElement(EOL)('\n\n\n')
    PsiComment(LINE_COMMENT)('# Dictionaries store mappings')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('empty_dict')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Dict')
        PsiElement(LEFT_BRACKET)('(')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Dict{Any,Any}()')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# You can create a dictionary using a literal')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Dict')
        PsiElement(LEFT_BRACKET)('(')
        JuliaArrowOpImpl(ARROW_OP)
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('one')
            PsiElement(QUOTE_END)('"')
          PsiElement(ARROW_SYM)('=>')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
        PsiElement(COMMA_SYM)(',')
        JuliaArrowOpImpl(ARROW_OP)
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('two')
            PsiElement(QUOTE_END)('"')
          PsiElement(ARROW_SYM)('=>')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
        PsiElement(COMMA_SYM)(',')
        JuliaArrowOpImpl(ARROW_OP)
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('three')
            PsiElement(QUOTE_END)('"')
          PsiElement(ARROW_SYM)('=>')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('3')
        PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => Dict{ASCIIString,Int64}')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Look up values with []')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaExprWrapperImpl(EXPR_WRAPPER)
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('one')
          PsiElement(QUOTE_END)('"')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiComment(LINE_COMMENT)('# => 1')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Get all keys')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('keys')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => KeyIterator{Dict{ASCIIString,Int64}}(["three"=>3,"one"=>1,"two"=>2])')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Note - dictionary keys are not sorted or in the order you inserted them.')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Get all values')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('values')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => ValueIterator{Dict{ASCIIString,Int64}}(["three"=>3,"one"=>1,"two"=>2])')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Note - Same as above regarding key ordering.')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Check for existence of keys in a dictionary with in, haskey')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaInAsOpImpl(IN_AS_OP)
        PsiElement(IN_KEYWORD)('in')
      PsiElement(LEFT_BRACKET)('(')
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaArrowOpImpl(ARROW_OP)
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('one')
            PsiElement(QUOTE_END)('"')
          PsiElement(ARROW_SYM)('=>')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaInAsOpImpl(IN_AS_OP)
        PsiElement(IN_KEYWORD)('in')
      PsiElement(LEFT_BRACKET)('(')
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaArrowOpImpl(ARROW_OP)
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('two')
            PsiElement(QUOTE_END)('"')
          PsiElement(ARROW_SYM)('=>')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('3')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => false')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('haskey')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(COMMA_SYM)(',')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('one')
        PsiElement(QUOTE_END)('"')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('haskey')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('1')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => false')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Trying to look up a non-existent key will raise an error')
    PsiElement(EOL)('\n')
    JuliaTryCatchImpl(TRY_CATCH)
      PsiElement(TRY_KEYWORD)('try')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('filled_dict')
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaExprWrapperImpl(EXPR_WRAPPER)
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('four')
              PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_M_BRACKET)(']')
        PsiComment(LINE_COMMENT)('# => ERROR: key not found: four in getindex at dict.jl:489')
        PsiElement(EOL)('\n')
      JuliaCatchClauseImpl(CATCH_CLAUSE)
        PsiElement(CATCH_KEYWORD)('catch')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('e')
        PsiElement(EOL)('\n')
        JuliaStatementsImpl(STATEMENTS)
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('println')
            PsiElement(LEFT_BRACKET)('(')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('e')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Use the get method to avoid that error by providing a default value')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# get(dictionary,key,default_value)')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('get')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(COMMA_SYM)(',')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('one')
        PsiElement(QUOTE_END)('"')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('4')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 1')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('get')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_dict')
      PsiElement(COMMA_SYM)(',')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('four')
        PsiElement(QUOTE_END)('"')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('4')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 4')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Use Sets to represent collections of unordered, unique values')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('empty_set')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Set')
        PsiElement(LEFT_BRACKET)('(')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Set{Any}()')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Initialize a set with values')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_set')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Set')
        PsiElement(LEFT_BRACKET)('(')
        JuliaArrayImpl(ARRAY)
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('3')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('4')
          PsiElement(RIGHT_M_BRACKET)(']')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Set{Int64}(1,2,3,4)')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Add more values to a set')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('push!')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_set')
      PsiElement(COMMA_SYM)(',')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('5')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Set{Int64}(5,4,2,3,1)')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Check if the values are in the set')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaInAsOpImpl(IN_AS_OP)
        PsiElement(IN_KEYWORD)('in')
      PsiElement(LEFT_BRACKET)('(')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('2')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_set')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaInAsOpImpl(IN_AS_OP)
        PsiElement(IN_KEYWORD)('in')
      PsiElement(LEFT_BRACKET)('(')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('10')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_set')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => false')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# There are functions for set intersection, union, and difference.')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('other_set')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Set')
        PsiElement(LEFT_BRACKET)('(')
        JuliaArrayImpl(ARRAY)
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('3')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('4')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('5')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('6')
          PsiElement(RIGHT_M_BRACKET)(']')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Set{Int64}(6,4,5,3)')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('intersect')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('filled_set')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('other_set')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Set{Int64}(3,4,5)')
    PsiElement(EOL)('\n')
    JuliaUnionImpl(UNION)
      PsiElement(UNION_KEYWORD)('union')
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('filled_set')
        PsiElement(COMMA_SYM)(',')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('other_set')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Set{Int64}(1,2,3,4,5,6)')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('setdiff')
      PsiElement(LEFT_BRACKET)('(')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Set')
        PsiElement(LEFT_BRACKET)('(')
        JuliaArrayImpl(ARRAY)
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('3')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('4')
          PsiElement(RIGHT_M_BRACKET)(']')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(COMMA_SYM)(',')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Set')
        PsiElement(LEFT_BRACKET)('(')
        JuliaArrayImpl(ARRAY)
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('2')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('3')
          PsiElement(COMMA_SYM)(',')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('5')
          PsiElement(RIGHT_M_BRACKET)(']')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Set{Int64}(1,4)')
    PsiElement(EOL)('\n\n\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('## 3. Control Flow')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Let's make a variable')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('some_var')
      PsiElement(EQ_SYM)('=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('5')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Here is an if statement. Indentation is not meaningful in Julia.')
    PsiElement(EOL)('\n')
    JuliaIfExprImpl(IF_EXPR)
      PsiElement(IF_KEYWORD)('if')
      JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('some_var')
        JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
          PsiElement(GREATER_THAN_SYM)('>')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('10')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('some_var is totally bigger than 10.')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
      JuliaElseIfClauseImpl(ELSE_IF_CLAUSE)
        PsiElement(ELSEIF_KEYWORD)('elseif')
        JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('some_var')
          JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
            PsiElement(LESS_THAN_SYM)('<')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('10')
        PsiComment(LINE_COMMENT)('# This elseif clause is optional.')
        PsiElement(EOL)('\n')
        JuliaStatementsImpl(STATEMENTS)
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('println')
            PsiElement(LEFT_BRACKET)('(')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('some_var is smaller than 10.')
              PsiElement(QUOTE_END)('"')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EOL)('\n')
      JuliaElseClauseImpl(ELSE_CLAUSE)
        PsiElement(ELSE_KEYWORD)('else')
        PsiComment(LINE_COMMENT)('# The else clause is optional too.')
        JuliaStatementsImpl(STATEMENTS)
          PsiElement(EOL)('\n')
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('println')
            PsiElement(LEFT_BRACKET)('(')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('some_var is indeed 10.')
              PsiElement(QUOTE_END)('"')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => prints "some var is smaller than 10"')
    PsiElement(EOL)('\n\n\n')
    PsiComment(LINE_COMMENT)('# For loops iterate over iterables.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Iterable types include Range, Array, Set, Dict, and AbstractString.')
    PsiElement(EOL)('\n')
    JuliaForExprImpl(FOR_EXPR)
      PsiElement(FOR_KEYWORD)('for')
      JuliaSingleIndexerImpl(SINGLE_INDEXER)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('animal')
        PsiElement(EQ_SYM)('=')
        JuliaArrayImpl(ARRAY)
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('dog')
            PsiElement(QUOTE_END)('"')
          PsiElement(COMMA_SYM)(',')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('cat')
            PsiElement(QUOTE_END)('"')
          PsiElement(COMMA_SYM)(',')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('mouse')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_M_BRACKET)(']')
      JuliaStatementsImpl(STATEMENTS)
        PsiElement(EOL)('\n')
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(SHORT_INTERPOLATE_SYM)('$')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('animal')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)(' is a mammal')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
        PsiComment(LINE_COMMENT)('# You can use $ to interpolate variables or expression into strings')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# prints:')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    dog is a mammal')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    cat is a mammal')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    mouse is a mammal')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# You can use 'in' instead of '='.')
    PsiElement(EOL)('\n')
    JuliaForExprImpl(FOR_EXPR)
      PsiElement(FOR_KEYWORD)('for')
      JuliaSingleIndexerImpl(SINGLE_INDEXER)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('animal')
        PsiElement(IN_KEYWORD)('in')
        JuliaArrayImpl(ARRAY)
          PsiElement(LEFT_M_BRACKET)('[')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('dog')
            PsiElement(QUOTE_END)('"')
          PsiElement(COMMA_SYM)(',')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('cat')
            PsiElement(QUOTE_END)('"')
          PsiElement(COMMA_SYM)(',')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('mouse')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_M_BRACKET)(']')
      JuliaStatementsImpl(STATEMENTS)
        PsiElement(EOL)('\n')
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(SHORT_INTERPOLATE_SYM)('$')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('animal')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)(' is a mammal')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# prints:')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    dog is a mammal')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    cat is a mammal')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    mouse is a mammal')
    PsiElement(EOL)('\n\n')
    JuliaForExprImpl(FOR_EXPR)
      PsiElement(FOR_KEYWORD)('for')
      JuliaSingleIndexerImpl(SINGLE_INDEXER)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('a')
        PsiElement(IN_KEYWORD)('in')
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('Dict')
          PsiElement(LEFT_BRACKET)('(')
          JuliaArrowOpImpl(ARROW_OP)
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('dog')
              PsiElement(QUOTE_END)('"')
            PsiElement(ARROW_SYM)('=>')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('mammal')
              PsiElement(QUOTE_END)('"')
          PsiElement(COMMA_SYM)(',')
          JuliaArrowOpImpl(ARROW_OP)
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('cat')
              PsiElement(QUOTE_END)('"')
            PsiElement(ARROW_SYM)('=>')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('mammal')
              PsiElement(QUOTE_END)('"')
          PsiElement(COMMA_SYM)(',')
          JuliaArrowOpImpl(ARROW_OP)
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('mouse')
              PsiElement(QUOTE_END)('"')
            PsiElement(ARROW_SYM)('=>')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('mammal')
              PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
      JuliaStatementsImpl(STATEMENTS)
        PsiElement(EOL)('\n')
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(STRING_INTERPOLATE_START)('$(')
              JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
                JuliaSymbolImpl(SYMBOL)
                  PsiElement(SYM)('a')
                PsiElement(LEFT_M_BRACKET)('[')
                JuliaExprWrapperImpl(EXPR_WRAPPER)
                  JuliaIntegerImpl(INTEGER)
                    PsiElement(INT_LITERAL)('1')
                PsiElement(RIGHT_M_BRACKET)(']')
              PsiElement(STRING_INTERPOLATE_END)(')')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)(' is a ')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(STRING_INTERPOLATE_START)('$(')
              JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
                JuliaSymbolImpl(SYMBOL)
                  PsiElement(SYM)('a')
                PsiElement(LEFT_M_BRACKET)('[')
                JuliaExprWrapperImpl(EXPR_WRAPPER)
                  JuliaIntegerImpl(INTEGER)
                    PsiElement(INT_LITERAL)('2')
                PsiElement(RIGHT_M_BRACKET)(']')
              PsiElement(STRING_INTERPOLATE_END)(')')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# prints:')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    dog is a mammal')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    cat is a mammal')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    mouse is a mammal')
    PsiElement(EOL)('\n\n')
    JuliaForExprImpl(FOR_EXPR)
      PsiElement(FOR_KEYWORD)('for')
      JuliaMultiIndexerImpl(MULTI_INDEXER)
        JuliaTupleImpl(TUPLE)
          PsiElement(LEFT_BRACKET)('(')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('k')
          PsiElement(COMMA_SYM)(',')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('v')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(IN_KEYWORD)('in')
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('Dict')
          PsiElement(LEFT_BRACKET)('(')
          JuliaArrowOpImpl(ARROW_OP)
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('dog')
              PsiElement(QUOTE_END)('"')
            PsiElement(ARROW_SYM)('=>')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('mammal')
              PsiElement(QUOTE_END)('"')
          PsiElement(COMMA_SYM)(',')
          JuliaArrowOpImpl(ARROW_OP)
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('cat')
              PsiElement(QUOTE_END)('"')
            PsiElement(ARROW_SYM)('=>')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('mammal')
              PsiElement(QUOTE_END)('"')
          PsiElement(COMMA_SYM)(',')
          JuliaArrowOpImpl(ARROW_OP)
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('mouse')
              PsiElement(QUOTE_END)('"')
            PsiElement(ARROW_SYM)('=>')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('mammal')
              PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
      JuliaStatementsImpl(STATEMENTS)
        PsiElement(EOL)('\n')
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(SHORT_INTERPOLATE_SYM)('$')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('k')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)(' is a ')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(SHORT_INTERPOLATE_SYM)('$')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('v')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# prints:')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    dog is a mammal')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    cat is a mammal')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#    mouse is a mammal')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# While loops loop while a condition is true')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('x')
      PsiElement(EQ_SYM)('=')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('0')
    PsiElement(EOL)('\n')
    JuliaWhileExprImpl(WHILE_EXPR)
      PsiElement(WHILE_KEYWORD)('while')
      JuliaComparisonLevelOpImpl(COMPARISON_LEVEL_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('x')
        JuliaComparisonLevelOperatorImpl(COMPARISON_LEVEL_OPERATOR)
          PsiElement(LESS_THAN_SYM)('<')
        JuliaIntegerImpl(INTEGER)
          PsiElement(INT_LITERAL)('4')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('x')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
        JuliaAssignLevelOpImpl(ASSIGN_LEVEL_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('x')
          JuliaAssignLevelOperatorImpl(ASSIGN_LEVEL_OPERATOR)
            PsiElement(PLUS_ASSIGN_SYM)('+=')
          JuliaIntegerImpl(INTEGER)
            PsiElement(INT_LITERAL)('1')
        PsiComment(LINE_COMMENT)('# Shorthand for x = x + 1')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# prints:')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#   0')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#   1')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#   2')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#   3')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Handle exceptions with a try/catch block')
    PsiElement(EOL)('\n')
    JuliaTryCatchImpl(TRY_CATCH)
      PsiElement(TRY_KEYWORD)('try')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('error')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('help')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
      JuliaCatchClauseImpl(CATCH_CLAUSE)
        PsiElement(CATCH_KEYWORD)('catch')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('e')
        PsiElement(EOL)('\n')
        JuliaStatementsImpl(STATEMENTS)
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('println')
            PsiElement(LEFT_BRACKET)('(')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('caught it ')
              JuliaTemplateImpl(TEMPLATE)
                PsiElement(SHORT_INTERPOLATE_SYM)('$')
                JuliaSymbolImpl(SYMBOL)
                  PsiElement(SYM)('e')
              PsiElement(QUOTE_END)('"')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => caught it ErrorException("help")')
    PsiElement(EOL)('\n\n\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('## 4. Functions')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('## these were moved to ParseFunctions.jl')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('## 5. Types')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# type Name')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#   field::OptionalType')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#   ...')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# end')
    PsiElement(EOL)('\n')
    JuliaTypeDeclarationImpl(TYPE_DECLARATION)
      PsiElement(TYPE_KEYWORD)('type')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Tiger')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaTypeOpImpl(TYPE_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('taillength')
          PsiElement(DOUBLE_COLON)('::')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('Float64')
        PsiElement(EOL)('\n')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('coatcolor')
        PsiComment(LINE_COMMENT)('# not including a type annotation is the same as `::Any`')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# The default constructor's arguments are the properties')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# of the type, in the order they are listed in the definition')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tigger')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Tiger')
        PsiElement(LEFT_BRACKET)('(')
        JuliaFloatLitImpl(FLOAT_LIT)
          PsiElement(FLOAT_LITERAL)('3.5')
        PsiElement(COMMA_SYM)(',')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('orange')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Tiger(3.5,"orange")')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# The type doubles as the constructor function for values of that type')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('sherekhan')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('typeof')
          PsiElement(LEFT_BRACKET)('(')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('tigger')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(LEFT_BRACKET)('(')
        JuliaFloatLitImpl(FLOAT_LIT)
          PsiElement(FLOAT_LITERAL)('5.6')
        PsiElement(COMMA_SYM)(',')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('fire')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Tiger(5.6,"fire")')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# abstract Name')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# abstract Cat')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# WARNING: deprecated syntax "abstract Cat" at REPL[27]:1.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Use "abstract type Cat end" instead.')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Abstract types cannot be instantiated, but can have subtypes.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# For example, Number is an abstract type')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('subtypes')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Number')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 2-element Array{Any,1}:')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#     Complex{T<:Real}')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#     Real')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('subtypes')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Cat')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => 0-element Array{Any,1}')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Every type has a super type; use the `super` function to get it.')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('typeof')
      PsiElement(LEFT_BRACKET)('(')
      JuliaIntegerImpl(INTEGER)
        PsiElement(INT_LITERAL)('5')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Int64')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('super')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Int64')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Signed')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('super')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Signed')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => Integer')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# All of these type, except for Int64, are abstract.')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('typeof')
      PsiElement(LEFT_BRACKET)('(')
      JuliaStringImpl(STRING)
        PsiElement(QUOTE_START)('"')
        JuliaStringContentImpl(STRING_CONTENT)
          PsiElement(REGULAR_STRING_PART_LITERAL)('fire')
        PsiElement(QUOTE_END)('"')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => ASCIIString')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('super')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('ASCIIString')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => DirectIndexString')
    PsiElement(EOL)('\n\n\n')
    JuliaTypeDeclarationImpl(TYPE_DECLARATION)
      PsiElement(TYPE_KEYWORD)('type')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Panther')
      PsiElement(SUBTYPE_SYM)('<:')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Cat')
      PsiComment(LINE_COMMENT)('# Panther is also a subtype of Cat')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('eye_color')
        PsiElement(EOL)('\n')
        JuliaCompactFunctionImpl(COMPACT_FUNCTION)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('Panther')
          JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
            PsiElement(LEFT_BRACKET)('(')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EQ_SYM)('=')
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('new')
            PsiElement(LEFT_BRACKET)('(')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('green')
              PsiElement(QUOTE_END)('"')
            PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
        PsiComment(LINE_COMMENT)('# Panthers will only have this constructor, and no default constructor.')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Using inner constructors, like Panther does, gives you control')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# over how values of the type can be created.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# When possible, you should use outer constructors rather than inner ones.')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('## 6. Multiple-Dispatch')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('####################################################')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# In Julia, all named functions are generic functions')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# This means that they are built up from many small methods')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Each constructor for Lion is a method of the generic function Lion.')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# For a non-constructor example, let's make a function meow:')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Definitions for Lion, Panther, Tiger')
    PsiElement(EOL)('\n')
    JuliaFunctionImpl(FUNCTION)
      PsiElement(FUNCTION_KEYWORD)('function')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('meow')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('animal')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Lion')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaMemberAccessOpImpl(MEMBER_ACCESS_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('animal')
          PsiElement(DOT_SYM)('.')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('roar')
        PsiComment(LINE_COMMENT)('# access type properties using dot notation')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    JuliaFunctionImpl(FUNCTION)
      PsiElement(FUNCTION_KEYWORD)('function')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('meow')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('animal')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Panther')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('grrr')
          PsiElement(QUOTE_END)('"')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Testing the meow function')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('meow')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tigger')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => "rawwr"')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('meow')
      PsiElement(LEFT_BRACKET)('(')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('brown')
          PsiElement(QUOTE_END)('"')
        PsiElement(COMMA_SYM)(',')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('ROAAR')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => "ROAAR"')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('meow')
      PsiElement(LEFT_BRACKET)('(')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Panther')
        PsiElement(LEFT_BRACKET)('(')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => "grrr"')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Review the local type hierarchy')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('issubtype')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Tiger')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Cat')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => false')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('issubtype')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Lion')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Cat')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('issubtype')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Panther')
      PsiElement(COMMA_SYM)(',')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Cat')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => true')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Defining a function that takes Cats')
    PsiElement(EOL)('\n')
    JuliaFunctionImpl(FUNCTION)
      PsiElement(FUNCTION_KEYWORD)('function')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('pet_cat')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('cat')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Cat')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('The cat says ')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(STRING_INTERPOLATE_START)('$(')
              JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
                JuliaSymbolImpl(SYMBOL)
                  PsiElement(SYM)('meow')
                PsiElement(LEFT_BRACKET)('(')
                JuliaSymbolImpl(SYMBOL)
                  PsiElement(SYM)('cat')
                PsiElement(RIGHT_BRACKET)(')')
              PsiElement(STRING_INTERPOLATE_END)(')')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('pet_cat')
      PsiElement(LEFT_BRACKET)('(')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('42')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => prints "The cat says 42"')
    PsiElement(EOL)('\n')
    JuliaTryCatchImpl(TRY_CATCH)
      PsiElement(TRY_KEYWORD)('try')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('pet_cat')
          PsiElement(LEFT_BRACKET)('(')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('tigger')
          PsiElement(RIGHT_BRACKET)(')')
        PsiComment(LINE_COMMENT)('# => ERROR: no method pet_cat(Tiger,)')
        PsiElement(EOL)('\n')
      JuliaCatchClauseImpl(CATCH_CLAUSE)
        PsiElement(CATCH_KEYWORD)('catch')
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('e')
        PsiElement(EOL)('\n')
        JuliaStatementsImpl(STATEMENTS)
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('println')
            PsiElement(LEFT_BRACKET)('(')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('e')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# In OO languages, single dispatch is common;')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# this means that the method is picked based on the type of the first argument.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# In Julia, all of the argument types contribute to selecting the best method.')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Let's define a function with more arguments, so we can see the difference')
    PsiElement(EOL)('\n')
    JuliaFunctionImpl(FUNCTION)
      PsiElement(FUNCTION_KEYWORD)('function')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('t')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Tiger')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('c')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Cat')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('println')
          PsiElement(LEFT_BRACKET)('(')
          JuliaStringImpl(STRING)
            PsiElement(QUOTE_START)('"')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)('The ')
            JuliaTemplateImpl(TEMPLATE)
              PsiElement(STRING_INTERPOLATE_START)('$(')
              JuliaMemberAccessOpImpl(MEMBER_ACCESS_OP)
                JuliaSymbolImpl(SYMBOL)
                  PsiElement(SYM)('t')
                PsiElement(DOT_SYM)('.')
                JuliaSymbolImpl(SYMBOL)
                  PsiElement(SYM)('coatcolor')
              PsiElement(STRING_INTERPOLATE_END)(')')
            JuliaStringContentImpl(STRING_CONTENT)
              PsiElement(REGULAR_STRING_PART_LITERAL)(' tiger wins!')
            PsiElement(QUOTE_END)('"')
          PsiElement(RIGHT_BRACKET)(')')
        PsiElement(EOL)('\n')
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => fight (generic function with 1 method)')
    PsiElement(EOL)('\n\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tigger')
      PsiElement(COMMA_SYM)(',')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Panther')
        PsiElement(LEFT_BRACKET)('(')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => prints The orange tiger wins!')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tigger')
      PsiElement(COMMA_SYM)(',')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('ROAR')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => prints The orange tiger wins!')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# Let's change the behavior when the Cat is specifically a Lion')
    PsiElement(EOL)('\n')
    JuliaCompactFunctionImpl(COMPACT_FUNCTION)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('t')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Tiger')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('l')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Lion')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('println')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('The ')
          JuliaTemplateImpl(TEMPLATE)
            PsiElement(STRING_INTERPOLATE_START)('$(')
            JuliaMemberAccessOpImpl(MEMBER_ACCESS_OP)
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('l')
              PsiElement(DOT_SYM)('.')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('mane_color')
            PsiElement(STRING_INTERPOLATE_END)(')')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('-maned lion wins!')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => fight (generic function with 2 methods)')
    PsiElement(EOL)('\n\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tigger')
      PsiElement(COMMA_SYM)(',')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Panther')
        PsiElement(LEFT_BRACKET)('(')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => prints The orange tiger wins!')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      PsiElement(LEFT_BRACKET)('(')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('tigger')
      PsiElement(COMMA_SYM)(',')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('ROAR')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => prints The green-maned lion wins!')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# We don't need a Tiger in order to fight')
    PsiElement(EOL)('\n')
    JuliaCompactFunctionImpl(COMPACT_FUNCTION)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('l')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Lion')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('c')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Cat')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('println')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('The victorious cat says ')
          JuliaTemplateImpl(TEMPLATE)
            PsiElement(STRING_INTERPOLATE_START)('$(')
            JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('meow')
              PsiElement(LEFT_BRACKET)('(')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('c')
              PsiElement(RIGHT_BRACKET)(')')
            PsiElement(STRING_INTERPOLATE_END)(')')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# => fight (generic function with 3 methods)')
    PsiElement(EOL)('\n\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      PsiElement(LEFT_BRACKET)('(')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('balooga!')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(COMMA_SYM)(',')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Panther')
        PsiElement(LEFT_BRACKET)('(')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => prints The victorious cat says grrr')
    PsiElement(EOL)('\n')
    JuliaTryCatchImpl(TRY_CATCH)
      PsiElement(TRY_KEYWORD)('try')
      PsiElement(EOL)('\n')
      JuliaStatementsImpl(STATEMENTS)
        JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('fight')
          PsiElement(LEFT_BRACKET)('(')
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Panther')
            PsiElement(LEFT_BRACKET)('(')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(COMMA_SYM)(',')
          JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Lion')
            PsiElement(LEFT_BRACKET)('(')
            JuliaStringImpl(STRING)
              PsiElement(QUOTE_START)('"')
              JuliaStringContentImpl(STRING_CONTENT)
                PsiElement(REGULAR_STRING_PART_LITERAL)('RAWR')
              PsiElement(QUOTE_END)('"')
            PsiElement(RIGHT_BRACKET)(')')
          PsiElement(RIGHT_BRACKET)(')')
        PsiComment(LINE_COMMENT)('# => ERROR: no method fight(Panther,Lion)')
        PsiElement(EOL)('\n')
      JuliaCatchClauseImpl(CATCH_CLAUSE)
        PsiElement(CATCH_KEYWORD)('catch')
        PsiElement(EOL)('\n')
        JuliaStatementsImpl(STATEMENTS)
          <empty list>
      PsiElement(END_KEYWORD)('end')
    PsiElement(EOL)('\n\n')
    PsiComment(LINE_COMMENT)('# This warning is because it's unclear which fight will be called in:')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      PsiElement(LEFT_BRACKET)('(')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('RAR')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(COMMA_SYM)(',')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('brown')
          PsiElement(QUOTE_END)('"')
        PsiElement(COMMA_SYM)(',')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('rarrr')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
    PsiComment(LINE_COMMENT)('# => prints The victorious cat says rarrr')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# The result may be different in other versions of Julia')
    PsiElement(EOL)('\n\n')
    JuliaCompactFunctionImpl(COMPACT_FUNCTION)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('l')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Lion')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('l2')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('Lion')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EQ_SYM)('=')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('println')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('The lions come to a tie')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('fight')
      PsiElement(LEFT_BRACKET)('(')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('RAR')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(COMMA_SYM)(',')
      JuliaApplyFunctionOpImpl(APPLY_FUNCTION_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('Lion')
        PsiElement(LEFT_BRACKET)('(')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('brown')
          PsiElement(QUOTE_END)('"')
        PsiElement(COMMA_SYM)(',')
        JuliaStringImpl(STRING)
          PsiElement(QUOTE_START)('"')
          JuliaStringContentImpl(STRING_CONTENT)
            PsiElement(REGULAR_STRING_PART_LITERAL)('rarrr')
          PsiElement(QUOTE_END)('"')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(RIGHT_BRACKET)(')')
  PsiComment(LINE_COMMENT)('# => prints The lions come to a tie')