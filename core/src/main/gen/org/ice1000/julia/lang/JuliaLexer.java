// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: grammar/julia-lexer.flex

package org.ice1000.julia.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.util.containers.*;
import org.ice1000.julia.lang.psi.JuliaTypes;


class JuliaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NESTED_COMMENT = 2;
  public static final int STRING_TEMPLATE = 4;
  public static final int RAW_STRING_TEMPLATE = 6;
  public static final int SHORT_TEMPLATE = 8;
  public static final int LONG_TEMPLATE = 10;
  public static final int CMD_STRING_TEMPLATE = 12;
  public static final int INSIDE_REGEX = 14;
  public static final int INSIDE_RAW_STR = 16;
  public static final int INSIDE_BYTE_ARRAY = 18;
  public static final int INSIDE_VERSION = 20;
  public static final int AFTER_SIMPLE_LIT = 22;
  public static final int AFTER_COLON = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00"+
    "\4\u0800\1\u0f00\1\u1000\2\u0800\1\u1100\1\u0800\1\u1200\1\u0800"+
    "\1\u1300\1\u1400\1\u1500\172\u0800\1\u1600\1\u0800\1\u1700\1\u1800"+
    "\1\u1900\1\u1a00\123\u0800\1\u1b00\4\u0800\1\u1c00\10\u0800\1\u1d00"+
    "\2\u0800\1\u1e00\1\u1f00\1\u1a00\1\u0800\1\u2000\1\u0800\1\u2100"+
    "\1\u1d00\1\u0900\3\u0800\1\u1900\1\u2200\114\u0800\1\u2300\1\u1900"+
    "\153\u0800\1\u2400\11\u0800\1\u2500\1\u1a00\6\u0800\1\u1900\u0f16\u0800";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\1\0\10\1\1\2\1\3\1\1\1\4\1\2\22\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\31\1\32\1\31\2\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\2\43\2\45\2\46\1\47\4\46\1\50\1\51"+
    "\1\52\7\46\1\53\2\46\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\46\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\46\1\112\1\113\1\114\1\115"+
    "\41\0\21\46\1\116\105\46\1\117\u0168\46\12\120\206\46"+
    "\12\120\306\46\12\120\234\46\12\120\166\46\12\120\140\46"+
    "\12\120\166\46\12\120\106\46\12\120\u0116\46\12\120\106\46"+
    "\12\120\u0246\46\12\120\46\46\12\120\u012c\46\12\120\200\46"+
    "\12\120\246\46\12\120\6\46\12\120\266\46\12\120\126\46"+
    "\12\120\206\46\12\120\6\46\12\120\361\46\1\121\104\46"+
    "\1\122\1\123\1\122\1\123\1\122\5\46\5\122\1\46"+
    "\1\122\1\46\3\122\1\46\1\122\2\46\4\122\1\46"+
    "\1\122\15\46\2\122\2\46\2\122\2\46\1\122\1\46"+
    "\2\122\1\46\1\122\1\46\6\122\1\46\1\122\1\46"+
    "\1\122\5\46\4\122\2\46\1\122\1\46\1\122\21\46"+
    "\1\122\1\123\12\122\10\46\1\124\5\125\5\46\2\116"+
    "\2\46\3\121\3\46\1\125\6\46\1\121\2\125\1\121"+
    "\1\116\1\121\1\116\14\46\1\125\1\116\1\46\2\125"+
    "\1\46\2\125\1\46\1\121\1\125\1\116\14\125\1\116"+
    "\20\125\1\126\1\127\1\130\1\125\1\131\1\132\46\125"+
    "\1\46\1\121\1\116\4\125\1\121\3\116\5\121\1\125"+
    "\1\46\2\116\2\121\2\125\5\46\1\125\2\46\1\125"+
    "\1\46\1\125\1\46\10\125\3\46\1\133\1\121\1\116"+
    "\6\46\1\121\1\46\2\121\1\46\4\121\1\125\1\116"+
    "\1\121\2\125\1\121\1\116\1\46\31\125\4\46\16\125"+
    "\267\46\1\121\u010a\46\1\125\5\46\2\125\7\46\1\121"+
    "\1\125\2\46\3\121\30\46\2\123\3\46\3\122\1\46"+
    "\17\122\4\123\6\122\2\123\5\122\4\46\4\122\43\46"+
    "\5\122\1\123\2\122\2\123\1\122\1\123\1\122\1\123"+
    "\2\122\2\123\2\122\2\123\2\122\2\123\2\122\2\123"+
    "\1\122\1\123\1\122\1\123\10\122\2\123\1\122\106\46"+
    "\1\125\1\121\3\46\1\121\1\46\2\121\2\125\37\46"+
    "\1\125\1\46\3\125\16\46\1\122\1\46\2\121\2\46"+
    "\2\116\13\46\1\121\1\116\24\46\1\121\4\46\15\116"+
    "\1\46\11\121\2\116\3\121\2\46\1\121\2\116\2\121"+
    "\1\116\4\46\1\116\1\121\1\116\2\121\2\116\1\121"+
    "\1\116\1\121\1\116\1\121\2\116\1\121\1\46\1\121"+
    "\1\116\1\121\1\116\3\121\3\116\2\46\2\125\2\46"+
    "\160\125\1\46\1\121\33\46\4\125\65\46\25\122\2\46"+
    "\6\122\323\46\12\120\u01a6\46\12\120\46\46\12\120\306\46"+
    "\12\120\26\46\12\120\126\46\12\120\u0196\46\12\120\26\46"+
    "\12\120\317\46\1\122\1\123\1\122\1\123\263\46\12\120"+
    "\206\46\12\120\u012c\46\12\120\200\46\12\120\74\46\12\120"+
    "\220\46\12\120\166\46\12\120\166\46\12\120\166\46\12\120"+
    "\146\46\12\120\206\46\12\120\106\46\12\120\266\46\12\120"+
    "\u0164\46\62\120\100\46\12\120\266\46";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[9728];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\1\3\31\1\32\1\33\1\34\1\35"+
    "\1\36\22\31\1\37\1\40\1\41\1\42\1\43\1\21"+
    "\1\31\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\2\1\1\60\1\61"+
    "\1\62\1\1\1\60\2\1\1\63\1\64\1\65\1\60"+
    "\1\66\1\60\1\67\1\60\1\70\1\71\1\72\1\73"+
    "\1\74\2\73\1\51\1\0\2\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\0\1\104\1\105\1\106\1\107"+
    "\1\110\1\0\1\111\1\112\1\113\1\114\1\112\5\0"+
    "\1\115\1\116\1\117\1\120\1\54\1\121\1\122\1\123"+
    "\1\124\1\55\1\125\1\126\1\31\1\127\2\31\1\130"+
    "\1\131\1\132\1\31\1\133\5\31\1\134\10\31\1\135"+
    "\1\31\1\136\10\31\1\137\7\31\1\140\1\31\1\141"+
    "\1\142\1\143\2\31\2\0\1\144\1\145\1\146\3\147"+
    "\2\0\1\53\1\150\1\151\1\106\1\0\1\152\1\0"+
    "\1\153\1\22\1\0\1\112\2\22\1\154\1\52\1\155"+
    "\1\156\1\157\1\160\1\161\7\31\1\162\3\31\1\163"+
    "\4\31\1\164\1\165\12\31\1\166\5\31\3\0\1\167"+
    "\1\160\1\0\2\22\1\0\1\170\11\31\1\171\15\31"+
    "\1\172\2\31\1\173\5\31\1\0\1\174\5\0\3\22"+
    "\1\160\2\31\1\175\1\176\1\177\1\200\3\31\1\201"+
    "\5\31\1\202\1\203\3\31\1\204\3\31\1\205\1\206"+
    "\1\207\1\210\1\160\1\112\1\0\1\22\3\31\1\211"+
    "\1\212\2\31\1\213\1\31\1\214\1\215\2\31\1\216"+
    "\1\217\1\31\4\0\3\31\1\220\3\31\1\221\2\31"+
    "\4\0\1\222\1\31\1\223\1\224\4\31\2\0\1\31"+
    "\1\225\1\226\1\31\1\227\1\0\1\230\5\0\1\231"+
    "\1\0\1\232";

  private static int [] zzUnpackAction() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\134\0\270\0\u0114\0\u0170\0\u01cc\0\u0228\0\u0284"+
    "\0\u02e0\0\u033c\0\u0398\0\u03f4\0\u0450\0\u04ac\0\u04ac\0\u0508"+
    "\0\u0564\0\u05c0\0\u061c\0\u0678\0\u06d4\0\u0730\0\u078c\0\u04ac"+
    "\0\u04ac\0\u07e8\0\u0844\0\u04ac\0\u08a0\0\u08fc\0\u0958\0\u09b4"+
    "\0\u0a10\0\u0a6c\0\u04ac\0\u0ac8\0\u0b24\0\u0b80\0\u04ac\0\u0bdc"+
    "\0\u0c38\0\u0c94\0\u0cf0\0\u04ac\0\u0d4c\0\u04ac\0\u0da8\0\u04ac"+
    "\0\u0e04\0\u0e60\0\u0ebc\0\u0f18\0\u0f74\0\u0fd0\0\u102c\0\u1088"+
    "\0\u10e4\0\u1140\0\u119c\0\u11f8\0\u1254\0\u12b0\0\u130c\0\u1368"+
    "\0\u13c4\0\u1420\0\u04ac\0\u147c\0\u04ac\0\u04ac\0\u0c38\0\u14d8"+
    "\0\u1534\0\u0c38\0\u0c38\0\u0c38\0\u0c38\0\u0c38\0\u0c38\0\u0c38"+
    "\0\u0c38\0\u0c38\0\u0c38\0\u1590\0\u15ec\0\u1648\0\u16a4\0\u1700"+
    "\0\u04ac\0\u175c\0\u17b8\0\u1814\0\u1870\0\u18cc\0\u1928\0\u04ac"+
    "\0\u04ac\0\u1984\0\u04ac\0\u19e0\0\u04ac\0\u1a3c\0\u04ac\0\u04ac"+
    "\0\u04ac\0\u04ac\0\u04ac\0\u1a98\0\u18cc\0\u1af4\0\u1b50\0\u1bac"+
    "\0\u04ac\0\u04ac\0\u04ac\0\u04ac\0\u04ac\0\u04ac\0\u04ac\0\u1c08"+
    "\0\u04ac\0\u04ac\0\u1c64\0\u04ac\0\u04ac\0\u1cc0\0\u1d1c\0\u1d78"+
    "\0\u1dd4\0\u04ac\0\u1e30\0\u1e8c\0\u1ee8\0\u1f44\0\u1fa0\0\u1ffc"+
    "\0\u04ac\0\u04ac\0\u04ac\0\u2058\0\u04ac\0\u04ac\0\u20b4\0\u04ac"+
    "\0\u04ac\0\u04ac\0\u2110\0\u216c\0\u21c8\0\u04ac\0\u2224\0\u2280"+
    "\0\u04ac\0\u22dc\0\u04ac\0\u2338\0\u04ac\0\u2394\0\u23f0\0\u244c"+
    "\0\u24a8\0\u2504\0\u0c38\0\u2560\0\u25bc\0\u2618\0\u2674\0\u26d0"+
    "\0\u272c\0\u2788\0\u27e4\0\u0c38\0\u2840\0\u0c38\0\u289c\0\u28f8"+
    "\0\u2954\0\u29b0\0\u2a0c\0\u2a68\0\u2ac4\0\u2b20\0\u04ac\0\u2b7c"+
    "\0\u2bd8\0\u2c34\0\u2c90\0\u2cec\0\u2d48\0\u2da4\0\u04ac\0\u2e00"+
    "\0\u04ac\0\u04ac\0\u04ac\0\u2e5c\0\u2eb8\0\u2f14\0\u2f70\0\u04ac"+
    "\0\u04ac\0\u2fcc\0\u04ac\0\u3028\0\u3084\0\u30e0\0\u313c\0\u04ac"+
    "\0\u04ac\0\u04ac\0\u04ac\0\u3198\0\u04ac\0\u31f4\0\u04ac\0\u1e8c"+
    "\0\u3250\0\u3250\0\u1f44\0\u32ac\0\u04ac\0\u04ac\0\u04ac\0\u3308"+
    "\0\u04ac\0\u3364\0\u04ac\0\u33c0\0\u341c\0\u3478\0\u34d4\0\u3530"+
    "\0\u358c\0\u35e8\0\u0c38\0\u3644\0\u36a0\0\u36fc\0\u0c38\0\u3758"+
    "\0\u37b4\0\u3810\0\u386c\0\u0c38\0\u0c38\0\u38c8\0\u3924\0\u3980"+
    "\0\u39dc\0\u3a38\0\u3a94\0\u3af0\0\u3b4c\0\u3ba8\0\u3c04\0\u0c38"+
    "\0\u3c60\0\u3cbc\0\u3d18\0\u3d74\0\u3dd0\0\u3e2c\0\u3e88\0\u3ee4"+
    "\0\u04ac\0\u3f40\0\u3f9c\0\u3ff8\0\u4054\0\u40b0\0\u04ac\0\u410c"+
    "\0\u4168\0\u41c4\0\u4220\0\u427c\0\u42d8\0\u4334\0\u4390\0\u43ec"+
    "\0\u4448\0\u44a4\0\u4500\0\u455c\0\u45b8\0\u4614\0\u4670\0\u46cc"+
    "\0\u4728\0\u4784\0\u47e0\0\u483c\0\u4898\0\u48f4\0\u04ac\0\u4950"+
    "\0\u49ac\0\u0c38\0\u4a08\0\u4a64\0\u4ac0\0\u4b1c\0\u4b78\0\u3084"+
    "\0\u04ac\0\u4bd4\0\u4c30\0\u4c8c\0\u4ce8\0\u4d44\0\u4da0\0\u4dfc"+
    "\0\u4e58\0\u0c38\0\u4eb4\0\u4f10\0\u0c38\0\u0c38\0\u0c38\0\u0c38"+
    "\0\u4f6c\0\u4fc8\0\u5024\0\u0c38\0\u5080\0\u50dc\0\u5138\0\u5194"+
    "\0\u51f0\0\u0c38\0\u0c38\0\u524c\0\u52a8\0\u5304\0\u0c38\0\u5360"+
    "\0\u53bc\0\u5418\0\u0c38\0\u0c38\0\u0c38\0\u0c38\0\u04ac\0\u5474"+
    "\0\u54d0\0\u552c\0\u5588\0\u55e4\0\u5640\0\u0c38\0\u0c38\0\u569c"+
    "\0\u56f8\0\u0c38\0\u5754\0\u57b0\0\u0c38\0\u580c\0\u5868\0\u0c38"+
    "\0\u0c38\0\u58c4\0\u5474\0\u5920\0\u597c\0\u59d8\0\u5a34\0\u5a90"+
    "\0\u5aec\0\u0c38\0\u5b48\0\u5ba4\0\u5c00\0\u0c38\0\u5c5c\0\u5cb8"+
    "\0\u5d14\0\u5d70\0\u5dcc\0\u5e28\0\u5e84\0\u5ee0\0\u0c38\0\u0c38"+
    "\0\u5f3c\0\u5f98\0\u5ff4\0\u6050\0\u60ac\0\u6108\0\u6164\0\u0c38"+
    "\0\u0c38\0\u61c0\0\u0c38\0\u621c\0\u0c38\0\u6278\0\u62d4\0\u6330"+
    "\0\u638c\0\u63e8\0\u04ac\0\u6444\0\u04ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\16\1\17\1\20\2\17\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\6\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\4\51\1\52\1\53\3\51"+
    "\1\54\1\55\1\56\1\57\1\51\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\51\1\70\1\51"+
    "\1\71\1\72\2\51\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\2\51\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\10\125\1\126"+
    "\26\125\1\127\74\125\7\130\1\131\1\130\1\132\43\130"+
    "\1\133\56\130\7\134\1\135\1\134\1\132\43\134\1\133"+
    "\56\134\11\16\1\136\31\16\11\137\4\16\1\137\1\16"+
    "\30\137\4\16\16\137\2\16\1\17\1\20\2\17\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\140\1\141"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\6\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\4\51"+
    "\1\52\1\53\3\51\1\54\1\55\1\56\1\57\1\51"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\51\1\70\1\51\1\71\1\72\2\51\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\2\51\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\11\142\1\132\43\142\1\133\3\142\1\143\52\142"+
    "\7\144\1\145\45\144\1\133\56\144\7\146\1\147\124\146"+
    "\7\144\1\150\45\144\1\133\56\144\7\146\1\151\124\146"+
    "\7\152\1\153\1\154\1\155\2\152\1\153\26\152\11\153"+
    "\4\152\1\153\1\152\30\153\4\152\16\153\11\152\1\155"+
    "\31\152\11\137\4\152\1\137\1\152\30\137\4\152\16\137"+
    "\137\0\1\20\167\0\1\156\103\0\1\157\124\0\3\160"+
    "\1\161\33\160\1\162\74\160\15\0\1\163\21\0\1\164"+
    "\133\0\1\165\107\0\1\166\23\0\1\167\74\0\1\170"+
    "\4\0\7\170\1\0\117\170\37\0\1\171\133\0\1\172"+
    "\116\0\1\173\14\0\1\174\1\175\6\0\1\176\107\0"+
    "\1\177\1\0\7\200\64\0\1\200\37\0\1\201\12\0"+
    "\1\202\117\0\1\203\1\0\7\41\10\0\1\204\1\205"+
    "\3\0\1\206\1\0\1\207\4\0\1\210\2\0\1\204"+
    "\2\0\2\205\7\0\1\206\10\0\1\207\7\0\1\41"+
    "\36\0\1\203\1\0\7\41\11\0\1\205\12\0\1\210"+
    "\5\0\2\205\30\0\1\41\47\0\1\211\2\0\1\212"+
    "\130\0\1\213\1\0\1\214\1\215\53\0\1\216\57\0"+
    "\1\217\1\220\127\0\1\221\2\0\1\222\1\223\136\0"+
    "\11\224\4\0\1\224\1\0\30\224\4\0\16\224\6\0"+
    "\1\225\5\0\1\226\10\0\7\51\7\0\11\51\4\0"+
    "\1\51\1\0\30\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\14\51\1\227\13\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\1\230\27\51\4\0\16\51\37\0\1\231\15\0\1\232"+
    "\115\0\1\233\102\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\1\51\1\234\26\51"+
    "\4\0\16\51\6\0\1\225\1\235\4\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\1\236\3\51"+
    "\1\237\13\51\1\240\7\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\1\241\14\51\1\242\12\51\4\0\16\51\6\0"+
    "\1\225\5\0\1\226\10\0\7\51\7\0\11\51\4\0"+
    "\1\51\1\0\15\51\1\243\12\51\4\0\16\51\6\0"+
    "\1\225\5\0\1\226\10\0\7\51\7\0\11\51\4\0"+
    "\1\51\1\0\12\51\1\244\1\51\1\245\11\51\1\246"+
    "\1\51\4\0\16\51\6\0\1\225\5\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\1\247\7\51"+
    "\1\250\4\51\1\251\5\51\1\252\4\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\12\51\1\253\15\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\5\51\1\254\5\51\1\255\1\256"+
    "\4\51\1\257\6\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\4\51\1\260\10\51\1\261\12\51\4\0\16\51\6\0"+
    "\1\225\5\0\1\226\10\0\7\51\7\0\11\51\4\0"+
    "\1\51\1\0\1\262\14\51\1\263\5\51\1\264\4\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\20\51\1\265\7\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\23\51\1\266\4\51"+
    "\4\0\16\51\6\0\1\225\1\267\4\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\1\270\3\51"+
    "\1\271\23\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\22\51"+
    "\1\272\5\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\20\51"+
    "\1\273\6\51\1\274\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\14\51\1\275\4\51\1\276\6\51\4\0\16\51\6\0"+
    "\1\225\1\277\4\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\30\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\7\51\1\300\20\51\4\0\16\51\37\0\1\301"+
    "\1\302\52\0\1\303\26\0\1\225\5\0\1\226\10\0"+
    "\7\51\3\0\1\202\3\0\11\51\4\0\1\51\1\0"+
    "\30\51\4\0\16\51\6\0\1\225\5\0\1\226\6\0"+
    "\1\203\1\0\7\111\7\0\2\51\1\304\6\51\4\0"+
    "\1\305\1\0\4\51\2\304\22\51\4\0\2\51\1\111"+
    "\13\51\6\0\1\225\5\0\1\226\10\0\7\51\3\0"+
    "\1\164\3\0\11\51\4\0\1\51\1\0\30\51\4\0"+
    "\16\51\10\125\1\306\26\125\1\307\133\125\1\162\104\125"+
    "\1\310\123\125\7\130\1\0\1\130\1\0\43\130\1\0"+
    "\56\130\15\0\1\311\25\0\11\312\4\0\1\312\1\0"+
    "\30\312\4\0\16\312\105\313\1\314\2\313\1\315\23\313"+
    "\7\134\1\316\1\134\1\0\43\134\1\0\65\134\1\317"+
    "\124\134\15\0\1\163\124\0\1\137\16\0\7\137\7\0"+
    "\11\137\4\0\1\137\1\0\30\137\4\0\16\137\11\142"+
    "\1\0\43\142\1\0\3\142\1\0\52\142\7\144\1\0"+
    "\45\144\1\0\56\144\7\146\1\0\124\146\37\0\1\162"+
    "\133\0\1\320\103\0\1\321\124\0\3\160\1\0\130\160"+
    "\1\170\4\0\7\170\1\322\117\170\40\0\1\323\171\0"+
    "\1\324\60\0\1\325\135\0\7\200\11\0\1\205\12\0"+
    "\1\326\5\0\2\205\30\0\1\200\52\0\1\327\121\0"+
    "\7\200\11\0\1\205\20\0\2\205\30\0\1\200\40\0"+
    "\2\330\127\0\1\331\2\0\7\332\24\0\1\332\37\0"+
    "\1\332\40\0\6\333\126\0\7\334\7\0\3\334\14\0"+
    "\6\334\71\0\7\41\24\0\1\210\37\0\1\41\52\0"+
    "\1\335\133\0\1\336\133\0\1\337\1\340\101\0\1\224"+
    "\16\0\7\224\7\0\11\224\4\0\1\224\1\0\30\224"+
    "\4\0\16\224\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\3\0\1\341\3\0\11\51\4\0\1\51\1\0\30\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\5\51\1\342\22\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\5\51\1\342\3\51\4\0\1\51\1\0\30\51"+
    "\4\0\16\51\37\0\1\343\102\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\21\51"+
    "\1\344\6\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\20\51"+
    "\1\345\7\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\6\51"+
    "\1\346\21\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\4\51"+
    "\1\347\23\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\22\51"+
    "\1\350\5\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\14\51"+
    "\1\351\13\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\21\51"+
    "\1\352\6\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\3\51"+
    "\1\353\24\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\16\51"+
    "\1\354\11\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\12\51"+
    "\1\355\15\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\14\51"+
    "\1\356\13\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\20\51"+
    "\1\357\7\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\14\51"+
    "\1\360\13\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\15\51"+
    "\1\361\12\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\13\51"+
    "\1\362\2\51\1\363\11\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\1\364\27\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\22\51\1\365\5\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\2\51\1\366\25\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\2\51\1\367\25\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\3\51\1\370\24\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\22\51\1\371\5\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\10\51\1\372\17\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\15\51\1\373\12\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\25\51\1\374\2\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\22\51\1\375\5\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\20\51\1\376\7\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\23\51\1\377\3\51\1\u0100\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\16\51\1\u0101\11\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\10\51\1\u0102\17\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\10\51\1\u0103\17\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\4\51\1\u0104\3\51\1\u0105\17\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\5\0\1\331\2\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\30\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\111\7\0\11\51"+
    "\4\0\1\305\1\0\30\51\4\0\2\51\1\111\13\51"+
    "\37\125\1\0\104\125\1\0\123\125\6\0\1\312\16\0"+
    "\7\312\7\0\11\312\4\0\1\312\1\0\30\312\4\0"+
    "\16\312\25\0\7\u0106\7\0\3\u0106\14\0\6\u0106\71\0"+
    "\7\u0107\7\0\3\u0107\14\0\6\u0107\44\0\7\134\1\u0108"+
    "\133\134\1\u0109\124\134\67\0\1\u010a\71\0\7\200\24\0"+
    "\1\326\37\0\1\200\40\0\7\332\24\0\1\332\37\0"+
    "\1\332\36\0\1\u010b\1\0\1\u010c\6\334\7\0\2\334"+
    "\1\u010d\4\0\1\u010e\7\0\4\334\2\u010d\10\0\1\u010e"+
    "\72\0\1\u010f\102\0\1\225\5\0\1\226\10\0\1\51"+
    "\1\u0110\1\51\1\u0111\3\51\7\0\11\51\4\0\1\51"+
    "\1\0\30\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\22\51"+
    "\1\u0112\5\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\4\51"+
    "\1\u0113\23\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\10\51"+
    "\1\u0114\17\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\1\u0115"+
    "\27\51\4\0\16\51\6\0\1\225\5\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\2\51\1\u0116"+
    "\25\51\4\0\16\51\6\0\1\225\5\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\21\51\1\u0117"+
    "\1\u0118\5\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\4\51"+
    "\1\u0119\23\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\15\51"+
    "\1\u011a\12\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\21\51"+
    "\1\u011b\6\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\1\u011c"+
    "\27\51\4\0\16\51\6\0\1\225\5\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\2\51\1\u011d"+
    "\25\51\4\0\16\51\6\0\1\225\5\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\1\51\1\u011e"+
    "\26\51\4\0\16\51\6\0\1\225\5\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\23\51\1\u011f"+
    "\4\51\4\0\16\51\6\0\1\225\5\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\15\51\1\u0120"+
    "\12\51\4\0\16\51\6\0\1\225\5\0\1\226\10\0"+
    "\7\51\7\0\11\51\4\0\1\51\1\0\1\u0121\27\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\20\51\1\u0122\7\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\23\51\1\u0123\4\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\1\u0124\27\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\13\51\1\u0125\14\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\22\51\1\u0126\5\51\4\0"+
    "\16\51\6\0\1\225\1\u0127\4\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\30\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\23\51\1\u0128\4\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\23\51\1\u0129\4\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\4\51\1\u012a\23\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\4\51\1\u012b\23\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\15\51\1\u012c\12\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\14\51\1\u012d\13\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\20\51\1\u012e\7\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\12\51\1\u012f\15\51\4\0\16\51"+
    "\25\0\7\u0130\7\0\3\u0130\14\0\6\u0130\71\0\7\u0131"+
    "\7\0\3\u0131\14\0\6\u0131\44\0\7\134\1\0\124\134"+
    "\26\0\1\u0132\1\0\1\u0133\130\0\7\u010b\7\0\3\u010b"+
    "\14\0\6\u010b\10\0\1\u0134\56\0\1\u010b\1\0\1\u010c"+
    "\6\334\7\0\2\334\1\u010d\4\0\1\u010e\1\u0135\6\0"+
    "\4\334\2\u010d\10\0\1\u010e\7\0\1\u0135\45\0\1\u0136"+
    "\1\u010b\1\0\1\u0137\6\u0138\7\0\2\334\1\u010d\4\0"+
    "\1\u010e\5\0\1\u0139\1\0\4\334\2\u010d\10\0\1\u010e"+
    "\17\0\1\u0139\35\0\1\u0136\2\0\7\u0139\24\0\1\u0139"+
    "\37\0\1\u0139\21\0\1\225\5\0\1\226\10\0\5\51"+
    "\1\u013a\1\51\7\0\11\51\4\0\1\51\1\0\30\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\2\51"+
    "\1\u013a\4\51\7\0\11\51\4\0\1\51\1\0\30\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\20\51\1\u013b\7\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\13\51\1\u013c\14\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\14\51\1\u013d\13\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\11\51\1\u013e\16\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\7\51\1\u013f\20\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\22\51\1\u0140\5\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\10\51\1\u0141\17\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\10\51\1\u0142\17\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\20\51\1\u0143\7\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\4\51\1\u0144\23\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\12\51\1\u0145\15\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\22\51\1\u0146\5\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\1\u0147\27\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\22\51\1\u0148\5\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\20\51\1\u0149\7\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\12\51\1\u014a\15\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\15\51\1\u014b\12\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\12\51\1\u014c\15\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\1\51\1\u014d\26\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\10\51\1\u014e\17\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\4\51\1\u014f\23\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\20\51\1\u0150\7\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\2\51\1\u0151\25\51\4\0"+
    "\16\51\6\0\1\225\5\0\1\226\10\0\7\51\7\0"+
    "\11\51\4\0\1\51\1\0\1\u0152\27\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\14\51\1\u0153\13\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\6\51\1\u0154\21\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\4\51\1\u0155\23\51\4\0\16\51"+
    "\6\0\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\4\51\1\u0156\23\51\4\0\16\51"+
    "\32\0\1\u0157\130\0\1\u0157\131\0\7\u0158\64\0\1\u0158"+
    "\40\0\7\u0159\7\0\3\u0159\14\0\6\u0159\71\0\7\u0139"+
    "\24\0\1\u0139\37\0\1\u0139\36\0\1\u010b\1\0\1\u0137"+
    "\6\u0138\7\0\2\334\1\u010d\4\0\1\u010e\1\u0135\4\0"+
    "\1\u0139\1\0\4\334\2\u010d\10\0\1\u010e\7\0\1\u0135"+
    "\7\0\1\u0139\36\0\1\u010b\1\0\1\u0137\6\u0138\7\0"+
    "\2\334\1\u010d\4\0\1\u010e\5\0\1\u0139\1\0\4\334"+
    "\2\u010d\10\0\1\u010e\17\0\1\u0139\36\0\1\u010b\1\0"+
    "\1\u015a\6\u0139\24\0\1\u0139\37\0\1\u0139\21\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\1\u015b\27\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\15\51\1\u015c\12\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\14\51\1\u015d\13\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\5\51\1\u015e\22\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\22\51\1\u015f\5\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\12\51\1\u0160\15\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\10\51\1\u0161\17\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\12\51\1\u0162\15\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\1\u0163\27\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\22\51"+
    "\1\u0164\5\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\4\51"+
    "\1\u0165\23\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\12\51"+
    "\1\u0166\15\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\22\51"+
    "\1\u0167\5\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\14\51"+
    "\1\u0168\13\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\22\51"+
    "\1\u0169\5\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\12\51"+
    "\1\u016a\15\51\4\0\16\51\25\0\7\u0158\24\0\1\u016b"+
    "\37\0\1\u0158\36\0\1\u010b\1\0\1\u016c\6\u0159\7\0"+
    "\2\u0159\1\u016d\4\0\1\u016e\7\0\4\u0159\2\u016d\10\0"+
    "\1\u016e\56\0\1\u010b\1\0\1\u015a\6\u0139\17\0\1\u0135"+
    "\4\0\1\u0139\27\0\1\u0135\7\0\1\u0139\21\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\2\51\1\u016f\25\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\3\51\1\u0170\24\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\23\51\1\u0171\4\51\4\0\16\51\6\0\1\225"+
    "\5\0\1\226\10\0\7\51\7\0\11\51\4\0\1\51"+
    "\1\0\27\51\1\u0172\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\15\51\1\u0173\12\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\1\51\1\u0174\26\51\4\0\16\51\6\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\1\u0175\27\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\4\51"+
    "\1\u0176\23\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\10\51"+
    "\1\u0177\17\51\4\0\16\51\6\0\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\10\51"+
    "\1\u0178\17\51\4\0\16\51\23\0\1\u010b\1\0\1\u016c"+
    "\6\u0159\7\0\2\u0159\1\u016d\4\0\1\u016e\1\u0135\6\0"+
    "\4\u0159\2\u016d\10\0\1\u016e\7\0\1\u0135\45\0\1\u0179"+
    "\1\u010b\1\0\1\u017a\6\u017b\7\0\2\u0159\1\u016d\4\0"+
    "\1\u016e\5\0\1\u017c\1\0\4\u0159\2\u016d\10\0\1\u016e"+
    "\17\0\1\u017c\35\0\1\u0179\2\0\7\u017c\24\0\1\u017c"+
    "\37\0\1\u017c\21\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\22\51\1\u017d\5\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\23\51\1\u017e\4\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\4\51\1\u017f\23\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\14\51\1\u0180\13\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\12\51\1\u0181\15\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\12\51\1\u0182\15\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\24\51\1\u0183\3\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\1\u0184\27\51\4\0"+
    "\16\51\25\0\7\u017c\24\0\1\u017c\37\0\1\u017c\36\0"+
    "\1\u010b\1\0\1\u017a\6\u017b\7\0\2\u0159\1\u016d\4\0"+
    "\1\u016e\1\u0135\4\0\1\u017c\1\0\4\u0159\2\u016d\10\0"+
    "\1\u016e\7\0\1\u0135\7\0\1\u017c\36\0\1\u010b\1\0"+
    "\1\u017a\6\u017b\7\0\2\u0159\1\u016d\4\0\1\u016e\5\0"+
    "\1\u017c\1\0\4\u0159\2\u016d\10\0\1\u016e\17\0\1\u017c"+
    "\36\0\1\u010b\1\0\1\u0185\6\u017c\24\0\1\u017c\37\0"+
    "\1\u017c\15\0\2\u0186\1\0\1\u0186\1\225\5\0\1\226"+
    "\10\0\7\51\7\0\11\51\4\0\1\51\1\0\30\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\12\51\1\u0187\15\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\4\51\1\u0188\23\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\12\51\1\u0189\15\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\4\51\1\u018a\23\51"+
    "\4\0\16\51\6\0\1\225\5\0\1\226\10\0\7\51"+
    "\7\0\11\51\4\0\1\51\1\0\21\51\1\u018b\6\51"+
    "\4\0\16\51\23\0\1\u010b\1\0\1\u0185\6\u017c\17\0"+
    "\1\u0135\4\0\1\u017c\27\0\1\u0135\7\0\1\u017c\15\0"+
    "\2\u0186\1\0\1\u0186\76\0\1\u018c\35\0\1\225\5\0"+
    "\1\226\10\0\7\51\7\0\11\51\4\0\1\51\1\0"+
    "\4\51\1\u018d\23\51\4\0\16\51\2\0\2\u018e\1\0"+
    "\1\u018e\1\225\5\0\1\226\10\0\7\51\7\0\11\51"+
    "\4\0\1\51\1\0\30\51\4\0\16\51\111\0\1\u018f"+
    "\24\0\2\u018e\1\0\1\u018e\76\0\1\u0190\127\0\1\u0191"+
    "\144\0\1\u0192\110\0\1\u0193\145\0\1\u0194\121\0\1\u0195"+
    "\45\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25760];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\11\10\1\2\11\2\1\1\11\6\1\1\11"+
    "\3\1\1\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\22\1\1\11\1\1\2\11\22\1\1\11\6\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\5\11\3\1\1\0"+
    "\1\1\7\11\1\0\2\11\1\1\2\11\1\0\3\1"+
    "\1\11\1\1\5\0\3\11\1\1\2\11\1\1\3\11"+
    "\3\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\31\1\1\11\7\1\1\11\1\1\3\11\2\1\2\0"+
    "\2\11\1\1\1\11\2\1\2\0\4\11\1\0\1\11"+
    "\1\0\1\11\1\1\1\0\3\1\3\11\1\1\1\11"+
    "\1\1\1\11\42\1\3\0\1\11\1\1\1\0\2\1"+
    "\1\0\1\11\27\1\1\11\10\1\1\0\1\11\5\0"+
    "\40\1\1\11\1\1\1\0\21\1\4\0\12\1\4\0"+
    "\10\1\2\0\5\1\1\0\1\1\5\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final IntStack stateStack = new IntStack();
  private static final IntStack leftBracketStack = new IntStack();
  private static int leftBraceCount = 0;
  private static boolean noInAndUnion = false;

  /** 虎哥化 */
  private void hugify(int state) {
    stateStack.push(yystate());
    leftBracketStack.push(leftBraceCount);
    leftBraceCount = 0;
    yybegin(state);
  }

  /** 去虎哥化 */
  private void dehugify() {
    leftBraceCount = leftBracketStack.pop();
    yybegin(stateStack.pop());
  }

  /** 重新虎哥化 */
  private void rehugify(int state) {
    dehugify();
    hugify(state);
  }

  private static void init() {
    leftBraceCount = 0;
    noInAndUnion = false;
    stateStack.clear();
    leftBracketStack.clear();
  }

  public JuliaLexer() {
    this((java.io.Reader) null);
    init();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JuliaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  init();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 155: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 156: break;
          case 3:
            { noInAndUnion = false; return JuliaTypes.EOL;
            }
          // fall through
          case 157: break;
          case 4:
            { return JuliaTypes.NOT_SYM;
            }
          // fall through
          case 158: break;
          case 5:
            { hugify(STRING_TEMPLATE); return JuliaTypes.QUOTE_START;
            }
          // fall through
          case 159: break;
          case 6:
            { return JuliaTypes.INTERPOLATE_SYM;
            }
          // fall through
          case 160: break;
          case 7:
            { return JuliaTypes.REMAINDER_SYM;
            }
          // fall through
          case 161: break;
          case 8:
            { return JuliaTypes.BITWISE_AND_SYM;
            }
          // fall through
          case 162: break;
          case 9:
            { return JuliaTypes.TRANSPOSE_SYM;
            }
          // fall through
          case 163: break;
          case 10:
            { return JuliaTypes.LEFT_BRACKET;
            }
          // fall through
          case 164: break;
          case 11:
            { hugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.RIGHT_BRACKET;
            }
          // fall through
          case 165: break;
          case 12:
            { return JuliaTypes.MULTIPLY_SYM;
            }
          // fall through
          case 166: break;
          case 13:
            { return JuliaTypes.PLUS_SYM;
            }
          // fall through
          case 167: break;
          case 14:
            { return JuliaTypes.COMMA_SYM;
            }
          // fall through
          case 168: break;
          case 15:
            { return JuliaTypes.MINUS_SYM;
            }
          // fall through
          case 169: break;
          case 16:
            { return JuliaTypes.DOT_SYM;
            }
          // fall through
          case 170: break;
          case 17:
            { return JuliaTypes.DIVIDE_SYM;
            }
          // fall through
          case 171: break;
          case 18:
            { hugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.INT_LITERAL;
            }
          // fall through
          case 172: break;
          case 19:
            { hugify(AFTER_COLON); return JuliaTypes.COLON_SYM;
            }
          // fall through
          case 173: break;
          case 20:
            { return JuliaTypes.SEMICOLON_SYM;
            }
          // fall through
          case 174: break;
          case 21:
            { return JuliaTypes.LESS_THAN_SYM;
            }
          // fall through
          case 175: break;
          case 22:
            { return JuliaTypes.EQ_SYM;
            }
          // fall through
          case 176: break;
          case 23:
            { return JuliaTypes.GREATER_THAN_SYM;
            }
          // fall through
          case 177: break;
          case 24:
            { return JuliaTypes.QUESTION_SYM;
            }
          // fall through
          case 178: break;
          case 25:
            { hugify(AFTER_SIMPLE_LIT); return JuliaTypes.SYM;
            }
          // fall through
          case 179: break;
          case 26:
            { return JuliaTypes.LEFT_M_BRACKET;
            }
          // fall through
          case 180: break;
          case 27:
            { return JuliaTypes.INVERSE_DIV_SYM;
            }
          // fall through
          case 181: break;
          case 28:
            { return JuliaTypes.RIGHT_M_BRACKET;
            }
          // fall through
          case 182: break;
          case 29:
            { return JuliaTypes.EXPONENT_SYM;
            }
          // fall through
          case 183: break;
          case 30:
            { hugify(CMD_STRING_TEMPLATE); return JuliaTypes.CMD_QUOTE_START;
            }
          // fall through
          case 184: break;
          case 31:
            { return JuliaTypes.LEFT_B_BRACKET;
            }
          // fall through
          case 185: break;
          case 32:
            { return JuliaTypes.BITWISE_OR_SYM;
            }
          // fall through
          case 186: break;
          case 33:
            { return JuliaTypes.RIGHT_B_BRACKET;
            }
          // fall through
          case 187: break;
          case 34:
            { return JuliaTypes.BITWISE_NOT_SYM;
            }
          // fall through
          case 188: break;
          case 35:
            { return JuliaTypes.MISC_PLUS_SYM;
            }
          // fall through
          case 189: break;
          case 36:
            { return JuliaTypes.MISC_MULTIPLY_SYM;
            }
          // fall through
          case 190: break;
          case 37:
            { return JuliaTypes.MISC_ARROW_SYM;
            }
          // fall through
          case 191: break;
          case 38:
            { return JuliaTypes.MISC_EXPONENT_SYM;
            }
          // fall through
          case 192: break;
          case 39:
            { return JuliaTypes.IN_SYM;
            }
          // fall through
          case 193: break;
          case 40:
            { return JuliaTypes.MISC_COMPARISON_SYM;
            }
          // fall through
          case 194: break;
          case 41:
            { return JuliaTypes.UNEQUAL_SYM;
            }
          // fall through
          case 195: break;
          case 42:
            { return JuliaTypes.IS_SYM;
            }
          // fall through
          case 196: break;
          case 43:
            { return JuliaTypes.ISNT_SYM;
            }
          // fall through
          case 197: break;
          case 44:
            { return JuliaTypes.LESS_THAN_OR_EQUAL_SYM;
            }
          // fall through
          case 198: break;
          case 45:
            { return JuliaTypes.GREATER_THAN_OR_EQUAL_SYM;
            }
          // fall through
          case 199: break;
          case 46:
            { return JuliaTypes.BITWISE_XOR_SYM;
            }
          // fall through
          case 200: break;
          case 47:
            { return JuliaTypes.BLOCK_COMMENT_BODY;
            }
          // fall through
          case 201: break;
          case 48:
            { return JuliaTypes.REGULAR_STRING_PART_LITERAL;
            }
          // fall through
          case 202: break;
          case 49:
            { rehugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.QUOTE_END;
            }
          // fall through
          case 203: break;
          case 50:
            { return JuliaTypes.SHORT_INTERPOLATE_SYM;
            }
          // fall through
          case 204: break;
          case 51:
            { dehugify(); return JuliaTypes.SYM;
            }
          // fall through
          case 205: break;
          case 52:
            { leftBraceCount++; return JuliaTypes.LEFT_BRACKET;
            }
          // fall through
          case 206: break;
          case 53:
            { if (leftBraceCount == 0) {
    dehugify();
    return JuliaTypes.STRING_INTERPOLATE_END;
  }
  leftBraceCount--;
  return JuliaTypes.RIGHT_BRACKET;
            }
          // fall through
          case 207: break;
          case 54:
            { rehugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.CMD_QUOTE_END;
            }
          // fall through
          case 208: break;
          case 55:
            { rehugify(AFTER_SIMPLE_LIT); return JuliaTypes.REGEX_END;
            }
          // fall through
          case 209: break;
          case 56:
            { dehugify(); return JuliaTypes.RAW_STR_END;
            }
          // fall through
          case 210: break;
          case 57:
            { dehugify(); return JuliaTypes.BYTE_ARRAY_END;
            }
          // fall through
          case 211: break;
          case 58:
            { dehugify(); return JuliaTypes.VERSION_END;
            }
          // fall through
          case 212: break;
          case 59:
            { dehugify(); yypushback(1);
            }
          // fall through
          case 213: break;
          case 60:
            { dehugify();
  yypushback(1);
  return JuliaTypes.IMPLICIT_MULTIPLY_SYM;
            }
          // fall through
          case 214: break;
          case 61:
            { return JuliaTypes.LINE_COMMENT;
            }
          // fall through
          case 215: break;
          case 62:
            { hugify(NESTED_COMMENT);
  return JuliaTypes.BLOCK_COMMENT_START;
            }
          // fall through
          case 216: break;
          case 63:
            { return JuliaTypes.EXPR_INTERPOLATE_START;
            }
          // fall through
          case 217: break;
          case 64:
            { return JuliaTypes.BITWISE_XOR_ASSIGN_SYM;
            }
          // fall through
          case 218: break;
          case 65:
            { return JuliaTypes.REMAINDER_ASSIGN_SYM;
            }
          // fall through
          case 219: break;
          case 66:
            { return JuliaTypes.AND_SYM;
            }
          // fall through
          case 220: break;
          case 67:
            { return JuliaTypes.BITWISE_AND_ASSIGN_SYM;
            }
          // fall through
          case 221: break;
          case 68:
            { return JuliaTypes.MULTIPLY_ASSIGN_SYM;
            }
          // fall through
          case 222: break;
          case 69:
            { return JuliaTypes.PLUS_ASSIGN_SYM;
            }
          // fall through
          case 223: break;
          case 70:
            { return JuliaTypes.SPECIAL_ARROW_SYM;
            }
          // fall through
          case 224: break;
          case 71:
            { return JuliaTypes.MINUS_ASSIGN_SYM;
            }
          // fall through
          case 225: break;
          case 72:
            { return JuliaTypes.LAMBDA_ABSTRACTION;
            }
          // fall through
          case 226: break;
          case 73:
            { return JuliaTypes.DOUBLE_DOT_SYM;
            }
          // fall through
          case 227: break;
          case 74:
            { hugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.FLOAT_LITERAL;
            }
          // fall through
          case 228: break;
          case 75:
            { return JuliaTypes.FRACTION_SYM;
            }
          // fall through
          case 229: break;
          case 76:
            { return JuliaTypes.DIVIDE_ASSIGN_SYM;
            }
          // fall through
          case 230: break;
          case 77:
            { return JuliaTypes.DOUBLE_COLON;
            }
          // fall through
          case 231: break;
          case 78:
            { return JuliaTypes.COLON_ASSIGN_SYM;
            }
          // fall through
          case 232: break;
          case 79:
            { return JuliaTypes.SUBTYPE_SYM;
            }
          // fall through
          case 233: break;
          case 80:
            { return JuliaTypes.SHL_SYM;
            }
          // fall through
          case 234: break;
          case 81:
            { return JuliaTypes.INVERSE_PIPE_SYM;
            }
          // fall through
          case 235: break;
          case 82:
            { return JuliaTypes.EQUALS_SYM;
            }
          // fall through
          case 236: break;
          case 83:
            { return JuliaTypes.ARROW_SYM;
            }
          // fall through
          case 237: break;
          case 84:
            { return JuliaTypes.SUPERTYPE_SYM;
            }
          // fall through
          case 238: break;
          case 85:
            { return JuliaTypes.SHR_SYM;
            }
          // fall through
          case 239: break;
          case 86:
            { return JuliaTypes.MACRO_SYM;
            }
          // fall through
          case 240: break;
          case 87:
            { return JuliaTypes.SYM;
            }
          // fall through
          case 241: break;
          case 88:
            { return JuliaTypes.INVERSE_DIV_ASSIGN_SYM;
            }
          // fall through
          case 242: break;
          case 89:
            { return JuliaTypes.FACTORISE_SYM;
            }
          // fall through
          case 243: break;
          case 90:
            { return JuliaTypes.EXPONENT_ASSIGN_SYM;
            }
          // fall through
          case 244: break;
          case 91:
            { hugify(INSIDE_BYTE_ARRAY); return JuliaTypes.BYTE_ARRAY_START;
            }
          // fall through
          case 245: break;
          case 92:
            { return JuliaTypes.DO_KEYWORD;
            }
          // fall through
          case 246: break;
          case 93:
            { return JuliaTypes.IF_KEYWORD;
            }
          // fall through
          case 247: break;
          case 94:
            { return noInAndUnion ? JuliaTypes.SYM : JuliaTypes.IN_KEYWORD;
            }
          // fall through
          case 248: break;
          case 95:
            { hugify(INSIDE_REGEX); return JuliaTypes.REGEX_START;
            }
          // fall through
          case 249: break;
          case 96:
            { hugify(INSIDE_VERSION); return JuliaTypes.VERSION_START;
            }
          // fall through
          case 250: break;
          case 97:
            { return JuliaTypes.BITWISE_OR_ASSIGN_SYM;
            }
          // fall through
          case 251: break;
          case 98:
            { return JuliaTypes.PIPE_SYM;
            }
          // fall through
          case 252: break;
          case 99:
            { return JuliaTypes.OR_SYM;
            }
          // fall through
          case 253: break;
          case 100:
            { dehugify();
  return JuliaTypes.BLOCK_COMMENT_END;
            }
          // fall through
          case 254: break;
          case 101:
            { hugify(LONG_TEMPLATE);
  return JuliaTypes.STRING_INTERPOLATE_START;
            }
          // fall through
          case 255: break;
          case 102:
            { hugify(SHORT_TEMPLATE);
  yypushback(yylength() - 1);
  return JuliaTypes.SHORT_INTERPOLATE_SYM;
            }
          // fall through
          case 256: break;
          case 103:
            { return JuliaTypes.STRING_ESCAPE;
            }
          // fall through
          case 257: break;
          case 104:
            { hugify(RAW_STRING_TEMPLATE); return JuliaTypes.TRIPLE_QUOTE_START;
            }
          // fall through
          case 258: break;
          case 105:
            { // hugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.CHAR_LITERAL;
            }
          // fall through
          case 259: break;
          case 106:
            { return JuliaTypes.SLICE_SYM;
            }
          // fall through
          case 260: break;
          case 107:
            { return JuliaTypes.FRACTION_ASSIGN_SYM;
            }
          // fall through
          case 261: break;
          case 108:
            { return JuliaTypes.SHL_ASSIGN_SYM;
            }
          // fall through
          case 262: break;
          case 109:
            { return JuliaTypes.SHR_ASSIGN_SYM;
            }
          // fall through
          case 263: break;
          case 110:
            { return JuliaTypes.USHR_SYM;
            }
          // fall through
          case 264: break;
          case 111:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yypushback(1);
  hugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.SYM;
            }
          // fall through
          case 265: break;
          case 112:
            { // hugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.FLOAT_CONSTANT;
            }
          // fall through
          case 266: break;
          case 113:
            { return JuliaTypes.FACTORISE_ASSIGN_SYM;
            }
          // fall through
          case 267: break;
          case 114:
            { return JuliaTypes.END_KEYWORD;
            }
          // fall through
          case 268: break;
          case 115:
            { return JuliaTypes.FOR_KEYWORD;
            }
          // fall through
          case 269: break;
          case 116:
            { return JuliaTypes.ISA_KEYWORD;
            }
          // fall through
          case 270: break;
          case 117:
            { return JuliaTypes.LET_KEYWORD;
            }
          // fall through
          case 271: break;
          case 118:
            { return JuliaTypes.TRY_KEYWORD;
            }
          // fall through
          case 272: break;
          case 119:
            { rehugify(AFTER_SIMPLE_LIT);
  return JuliaTypes.TRIPLE_QUOTE_END;
            }
          // fall through
          case 273: break;
          case 120:
            { return JuliaTypes.USHR_ASSIGN_SYM;
            }
          // fall through
          case 274: break;
          case 121:
            { return JuliaTypes.ELSE_KEYWORD;
            }
          // fall through
          case 275: break;
          case 122:
            { hugify(INSIDE_RAW_STR); return JuliaTypes.RAW_STR_START;
            }
          // fall through
          case 276: break;
          case 123:
            { return JuliaTypes.TRUE_KEYWORD;
            }
          // fall through
          case 277: break;
          case 124:
            { return JuliaTypes.STRING_UNICODE;
            }
          // fall through
          case 278: break;
          case 125:
            { return JuliaTypes.BEGIN_KEYWORD;
            }
          // fall through
          case 279: break;
          case 126:
            { return JuliaTypes.BREAK_KEYWORD;
            }
          // fall through
          case 280: break;
          case 127:
            { return JuliaTypes.CATCH_KEYWORD;
            }
          // fall through
          case 281: break;
          case 128:
            { return JuliaTypes.CONST_KEYWORD;
            }
          // fall through
          case 282: break;
          case 129:
            { return JuliaTypes.FALSE_KEYWORD;
            }
          // fall through
          case 283: break;
          case 130:
            { return JuliaTypes.LOCAL_KEYWORD;
            }
          // fall through
          case 284: break;
          case 131:
            { return JuliaTypes.MACRO_KEYWORD;
            }
          // fall through
          case 285: break;
          case 132:
            { return JuliaTypes.QUOTE_KEYWORD;
            }
          // fall through
          case 286: break;
          case 133:
            { return noInAndUnion ? JuliaTypes.SYM : JuliaTypes.UNION_KEYWORD;
            }
          // fall through
          case 287: break;
          case 134:
            { return JuliaTypes.USING_KEYWORD;
            }
          // fall through
          case 288: break;
          case 135:
            { return JuliaTypes.WHERE_KEYWORD;
            }
          // fall through
          case 289: break;
          case 136:
            { return JuliaTypes.WHILE_KEYWORD;
            }
          // fall through
          case 290: break;
          case 137:
            { return JuliaTypes.ELSEIF_KEYWORD;
            }
          // fall through
          case 291: break;
          case 138:
            { return JuliaTypes.EXPORT_KEYWORD;
            }
          // fall through
          case 292: break;
          case 139:
            { return JuliaTypes.GLOBAL_KEYWORD;
            }
          // fall through
          case 293: break;
          case 140:
            { noInAndUnion = true; return JuliaTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 294: break;
          case 141:
            { return JuliaTypes.MODULE_KEYWORD;
            }
          // fall through
          case 295: break;
          case 142:
            { return JuliaTypes.RETURN_KEYWORD;
            }
          // fall through
          case 296: break;
          case 143:
            { return JuliaTypes.STRUCT_KEYWORD;
            }
          // fall through
          case 297: break;
          case 144:
            { return JuliaTypes.FINALLY_KEYWORD;
            }
          // fall through
          case 298: break;
          case 145:
            { return JuliaTypes.MUTABLE_KEYWORD;
            }
          // fall through
          case 299: break;
          case 146:
            { return JuliaTypes.ABSTRACT_KEYWORD;
            }
          // fall through
          case 300: break;
          case 147:
            { return JuliaTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 301: break;
          case 148:
            { return JuliaTypes.FUNCTION_KEYWORD;
            }
          // fall through
          case 302: break;
          case 149:
            { return JuliaTypes.IMMUTABLE_KEYWORD;
            }
          // fall through
          case 303: break;
          case 150:
            { noInAndUnion = true; return JuliaTypes.IMPORTALL_KEYWORD;
            }
          // fall through
          case 304: break;
          case 151:
            { return JuliaTypes.TYPEALIAS_KEYWORD;
            }
          // fall through
          case 305: break;
          case 152:
            { return JuliaTypes.BAREMODULE_KEYWORD;
            }
          // fall through
          case 306: break;
          case 153:
            { return JuliaTypes.ABSTRACT_TYPE_KEYWORD;
            }
          // fall through
          case 307: break;
          case 154:
            { return JuliaTypes.PRIMITIVE_TYPE_KEYWORD;
            }
          // fall through
          case 308: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
