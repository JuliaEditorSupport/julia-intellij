//noinspection BnfResolveForFile
{
  generate=[java="8" names="long" visitor-value="R"]
  // ref: https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm
  // https://raw.githubusercontent.com/JuliaLang/julia/master/src/julia-parser.scm
  parserClass='org.ice1000.julia.lang.JuliaParser'
  parserUtilClass='org.ice1000.julia.lang.parsing.JuliaGeneratedParserUtilBase'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Julia'
  psiImplClassSuffix='Impl'
  psiPackage='org.ice1000.julia.lang.psi'
  psiImplPackage='org.ice1000.julia.lang.psi.impl'

  extends('.*Op|.*Expr|.*Lit|.*ymbol|.*lock')=expr
  extends('.*Indexing')=exprOrEnd

  tokenTypeClass='org.ice1000.julia.lang.JuliaTokenType'
  elementTypeHolderClass='org.ice1000.julia.lang.psi.JuliaTypes'
  elementTypeClass='org.ice1000.julia.lang.JuliaElementType'
  elementTypeFactory='org.ice1000.julia.lang.JuliaElementType.createType'
  generateFirstCheck=50
}

juliaFile ::= endOfLine statements

symbol ::= SYM | privateOpAsSymbol {
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaSymbol']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaSymbolMixin'
}

macroSymbol ::= MACRO_SYM {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaMacroSymbolMixin'
}

unaryOpAsSymbol ::= privateUnaryOpAsSymbol
opAsSymbol ::= privateOpAsSymbol

// Can `DOT` be a symbol?
private privateUnaryOpAsSymbol::=
   MINUS_SYM
 | PLUS_SYM
 | NOT_SYM
 | INTERPOLATE_SYM
private privateOpAsSymbol::=
	privateOpSymbols
 | keywordsAsOp
 | typeAnnotationAsOp
private privateOpSymbols::= privateUnaryOpAsSymbol | privateOperaSymbols
private privateOperaSymbols ::=
//   SEMICOLON_SYM |
QUESTION_SYM
 | SUBTYPE_SYM
 | INVERSE_DIV_SYM
 | IS_SYM
 | ISNT_SYM
 | EQ_SYM
 | LAMBDA_ABSTRACTION
 | ARROW_SYM
 | SLICE_SYM
 | LESS_THAN_SYM
 | LESS_THAN_OR_EQUAL_SYM
 | AND_SYM
 | OR_SYM
 | PIPE_SYM
 | INVRESE_PIPE_SYM
 | SHL_SYM
 | SHR_SYM
 | USHR_SYM
 | FRACTION_SYM
 | DIVIDE_SYM
 | REMAINDER_SYM
 | EXPONENT_SYM
 | MULTIPLY_SYM
 | EQUALS_SYM
 | UNEQUAL_SYM
 | GREATER_THAN_SYM
 | GREATER_THAN_OR_EQUAL_SYM
 | TRANSPOSE_SYM
 | IN_SYM
 | MISC_COMPARISON_SYM
 | MISC_PLUS_SYM
 | MISC_MULTIPLY_SYM
 | MISC_EXPONENT_SYM
 | FACTORISE_SYM
 | BITWISE_AND_SYM
 | BITWISE_OR_SYM
 | BITWISE_XOR_SYM
 | SPECIAL_ARROW_SYM
 | MISC_ARROW_SYM
 | BITWISE_NOT_SYM
 | ASSIGN_SYM
 | COLON_SYM

comment ::= blockComment | LINE_COMMENT
private blockComment ::= BLOCK_COMMENT_START (BLOCK_COMMENT_BODY | blockComment)* BLOCK_COMMENT_END

private singleQuoteString ::= QUOTE_START stringTemplateElement* QUOTE_END { pin=1 }
private tripleQuoteString ::= TRIPLE_QUOTE_START stringTemplateElement* TRIPLE_QUOTE_END { pin=1 }
command ::= CMD_QUOTE_START stringTemplateElement* CMD_QUOTE_END { extends=expr }
string ::= singleQuoteString | tripleQuoteString {
	extends=expr
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaString']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaStringMixin'
}

regex ::= REGEX_START stringTrivialElement* REGEX_END {
	extends=expr
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaRegex']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaRegexMixin'
}

rawString ::=
 RAW_STR_START stringContent* RAW_STR_END {
 	pin=1
	extends=expr
}

versionNumber ::=
 VERSION_START stringContent* VERSION_END {
 	pin=1
	extends=expr
}

byteArray ::=
 BYTE_ARRAY_START stringTrivialElement* BYTE_ARRAY_END {
 	pin=1
	extends=expr
}

private stringTrivialElement::=
   STRING_UNICODE
 | STRING_ESCAPE
 | stringContent

private stringTemplateElement::=
   stringTrivialElement
 | template

template ::= SHORT_INTERPOLATE_SYM symbol | STRING_INTERPOLATE_START expr STRING_INTERPOLATE_END
stringContent ::= REGULAR_STRING_PART_LITERAL

integer ::= INT_LITERAL { extends=expr }
floatLit ::= FLOAT_LITERAL | FLOAT_CONSTANT
booleanLit ::= TRUE_KEYWORD | FALSE_KEYWORD
charLit ::= CHAR_LITERAL

private endOfLineImpl ::= EOL | comment
private endOfLine ::= endOfLineImpl*
private semi ::= endOfLineImpl | SEMICOLON_SYM
statements ::= semi* (statement (semi+ statement)*)? semi* {
	mixin='org.ice1000.julia.lang.psi.impl.JuliaStatementsMixin'
}

private statement ::=
   moduleDeclaration
 | importExpr
 | importAllExpr
 | export
 | typeDeclaration
 | compactFunction
 | function
 | multiAssignOp // in the situation it won't be regarded as `typedNamedVariable`
 | expr

moduleDeclaration ::=
 (BAREMODULE_KEYWORD | MODULE_KEYWORD) symbol endOfLine
  statements
 END_KEYWORD {
	pin=1
	stubClass='org.ice1000.julia.lang.psi.JuliaModuleDeclarationClassStub'
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaModuleDeclaration']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaModuleDeclarationMixin'
}

globalStatement ::=
 GLOBAL_KEYWORD endOfLine expressionList {pin=1 extends=expr}

typeAnnotation ::=
 DOUBLE_COLON endOfLine
 symbol (DOT_SYM symbol)* endOfLine
 typeParameters?

typedNamedVariable ::=
 (
   symbol typeAnnotation?
 | symbol? typeAnnotation
 | applyMacroOp
 ) (SLICE_SYM|(endOfLine EQ_SYM endOfLine expr))? {
	mixin='org.ice1000.julia.lang.psi.impl.JuliaTypedNamedVariableMixin'
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
}

typeParameters ::=
 LEFT_B_BRACKET endOfLine
  (expr whereClause?)? (commaSep (expr whereClause?)?)* endOfLine
 RIGHT_B_BRACKET{pin=1}

userType ::= primaryExpr typeParameters?
typeAlias ::= TYPEALIAS_KEYWORD symbol typeParameters? userType { extends=expr }

private expressionList ::= expr (commaSep expr)*
private strictExpressionList ::= namedLeftValue (commaSep namedLeftValue)+
private namedLeftValue::=symbol | memberAccess
//namedParameter ::= symbol endOfLine EQ_SYM endOfLine expr

// lowest
applyMacroOp ::= macroSymbol expr expr*// BUG: `expr+` is useless, and I don't know why~

// naming: level+number or type+level or type+levelOp
expr ::=
 compactFunction
 | globalStatement
 | applyMacroOp
 | assignLevel
 | arrowOp
 | ternaryOp
 | lambda
 | miscArrowsOp
 | orOp
 | andOp
 | comparisonLevelOp
 | pipeLevelOp
 | quoteLevel
 | plusLevelOp
 | bitwiseLevel
 | multiplyLevel
 | fractionLevel
 | exponentLevel
 | typeOp
 | unaryLevel
 | array
 | suffixedExpr
 | primaryExpr {
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaExpr']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaExprMixin'
}

memberAccessOp ::= expr DOT_SYM expr{rightAssociative=true}

memberAccess ::=
   IN_KEYWORD
 | UNION_KEYWORD
 | opAsSymbol
 | symbolAndMacroSymbol (DOT_SYM symbolAndMacroSymbol)*{rightAssociative=true}

private access ::= (DOT_SYM | DOUBLE_DOT_SYM | SLICE_SYM)? memberAccess
private symbolAndMacroSymbol ::= symbol | macroSymbol

compactFunction ::=
 (symbol)
 (typeParameters endOfLine)?
 (functionSignature endOfLine)
 (whereClause endOfLine)*
 EQ_SYM endOfLine expressionList {
	pin=5
	extends=expr
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaFunctionDeclaration']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaCompactFunctionMixin'
}

// level 0
private assignLevel ::=
   assignOp
 | assignLevelOp

assignOp ::= expr commaSep? (EQ_SYM | ASSIGN_SYM) endOfLine expr {
	rightAssociative=true
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaAssignOpMixin'
}

multiAssignOp ::= strictExpressionList commaSep? (EQ_SYM | ASSIGN_SYM) endOfLine expressionList
assignLevelOp ::= expr assignLevelOperator endOfLine expressionList { rightAssociative=true }
assignLevelOperator ::=
   COLON_ASSIGN_SYM
 | BITWISE_AND_ASSIGN_SYM
 | BITWISE_OR_ASSIGN_SYM
 | BITWISE_XOR_ASSIGN_SYM
 | INVERSE_DIV_ASSIGN_SYM
 | SHL_ASSIGN_SYM
 | SHR_ASSIGN_SYM
 | REMAINDER_ASSIGN_SYM
 | USHR_ASSIGN_SYM
 | PLUS_ASSIGN_SYM
 | MINUS_ASSIGN_SYM
 | MULTIPLY_ASSIGN_SYM
 | FRACTION_ASSIGN_SYM
 | DIVIDE_ASSIGN_SYM
 | FACTORISE_ASSIGN_SYM
 | EXPONENT_ASSIGN_SYM

// level 1.5
arrowOp ::= expr ARROW_SYM endOfLine expr { rightAssociative=true }

// ? :
// level 2
ternaryOp ::= expr QUESTION_SYM endOfLine rangeOp { pin=2 }

// level 16
private suffixedExpr ::=
   applyFunctionOp
 | applyIndexOp
 | dotApplyFunctionOp
 | memberAccessOp
// | applyWhereOp
 | type

type ::=
 expr typeParameters
 whereClause?
 { extends=expr }

exprOrEnd ::=
   plusIndexing
 | multiplyIndexing
 | spliceIndexing
 | assignLevelOperatorIndexing
 | rangeIndexing
 | quoteIndexing
 | ternaryOpIndexing
 | end
 | exprWrapper
 | bracketedExprIndexing

end ::= END_KEYWORD { extends=exprOrEnd }
exprWrapper ::=  memberAccessOp | ternaryOp | primaryExpr { extends=exprOrEnd }
rangeIndexing ::= exprOrEnd COLON_SYM exprOrEnd
quoteIndexing ::= COLON_SYM exprOrEnd?
ternaryOpIndexing::= exprOrEnd QUESTION_SYM rangeIndexing
plusIndexing ::= exprOrEnd plusLevelOperator exprOrEnd
multiplyIndexing ::= exprOrEnd multiplyLevelOperator exprOrEnd
spliceIndexing ::= exprOrEnd SLICE_SYM
assignLevelOperatorIndexing::= exprOrEnd assignLevelOperator exprOrEnd
bracketedExprIndexing ::=
 LEFT_BRACKET endOfLine
  exprOrEnd
 RIGHT_BRACKET

applyIndexOp ::= expr LEFT_M_BRACKET
 (
   comprehensionElement
 | exprOrEnd typeAnnotation? (COMMA_SYM exprOrEnd typeAnnotation?)*
 ) endOfLine
 RIGHT_M_BRACKET

//applyWhereOp ::= expr whereClause
dotApplyFunctionOp::= expr DOT_SYM privateOpSymbols expr{pin=3}

applyFunctionOp ::=
 expr DOT_SYM? LEFT_BRACKET endOfLine
  (
    comprehensionElement+
  | (
     (expressionList endOfLine)?
     commaSep?
     commaSep?
     arguments*
    )
  )?
  endOfLine
 RIGHT_BRACKET doBlock?

arguments ::=
 SEMICOLON_SYM endOfLine
 (expressionList endOfLine)?
 (commaSep)?
 (symbol SLICE_SYM)?{pin=1}

private symbolLhsInternal ::= symbol | LEFT_BRACKET symbol RIGHT_BRACKET
symbolLhs ::=
 ((LOCAL_KEYWORD | CONST_KEYWORD) endOfLine)
 symbolLhsInternal (commaSep symbolLhsInternal)* { extends=expr }

// All reserved but unassigned
// level 2.5
miscArrowsOp ::= expr (SPECIAL_ARROW_SYM | MISC_ARROW_SYM) endOfLine expr

// ||
// level 3
orOp ::= expr endOfLine OR_SYM endOfLine expr

// &&
// level 4
andOp ::= expr endOfLine AND_SYM endOfLine expr

// ->
// level 5
lambda ::=
 (symbol typeAnnotation? | tuple | LEFT_BRACKET RIGHT_BRACKET)
  LAMBDA_ABSTRACTION expr {
	rightAssociative=true
	extends=expr
	mixin='org.ice1000.julia.lang.psi.impl.JuliaLambdaMixin'
}

// level 6
comparisonLevelOp ::= expr comparisonLevelOperator endOfLine expr
comparisonLevelOperator ::=
   LESS_THAN_SYM
 | LESS_THAN_OR_EQUAL_SYM
 | GREATER_THAN_SYM
 | GREATER_THAN_OR_EQUAL_SYM
 | EQUALS_SYM
 | UNEQUAL_SYM
 | IS_SYM
 | ISNT_SYM
 | SUBTYPE_SYM
 | MISC_COMPARISON_SYM

// |>
// level 7
pipeLevelOperator ::= PIPE_SYM | INVERSE_PIPE_SYM
pipeLevelOp ::= expr pipeLevelOperator endOfLine expr

private quoteLevel ::=
   spliceOp
 | colonOp
 | quoteOp
 | compoundQuoteOp

colonSymBegins::= COLON_SYM endOfLine LEFT_BRACKET
colonOp ::= expr colonSymBegins expr RIGHT_BRACKET
spliceOp ::= expr SLICE_SYM
compoundQuoteOp ::= QUOTE_KEYWORD endOfLine (expr endOfLine)* END_KEYWORD
quoteOp ::= COLON_SYM endOfLine quotable
private quotable ::=
   unaryOpAsSymbol
 | opAsSymbol
 | QUOTE_KEYWORD
 | expr

// + - etc
plusLevelOp ::= expr plusLevelOperator endOfLine expr
plusLevelOperator ::=
   INTERPOLATE_SYM
 | BITWISE_XOR_SYM
 | BITWISE_OR_SYM
 | PLUS_SYM
 | MINUS_SYM
 | MISC_PLUS_SYM

private bitwiseLevel ::=
   bitwiseLevelOp
 | rangeOp
 | transposeOp

bitwiseLevelOp ::= expr bitwiseLevelOperator endOfLine expr
rangeOp ::= expr COLON_SYM endOfLine expr
bitwiseLevelOperator ::=
   SHR_SYM
 | USHR_SYM
 | SHL_SYM

transposeOp ::= expr TRANSPOSE_SYM

// * / % & ^
private multiplyLevel ::=
   multiplyLevelOp
 | implicitMultiplyOp
 | stringLikeMultiplyOp

multiplyLevelOp ::= expr multiplyLevelOperator endOfLine expr
stringLikeMultiplyOp ::= stringValue (endOfLine MULTIPLY_SYM endOfLine stringValue)+
private stringValue::= string | memberAccess
//multiplyLevelOp ::= expr multiplyLevelOperator endOfLine expr
multiplyLevelOperator ::=
   MULTIPLY_SYM
 | DIVIDE_SYM
 | REMAINDER_SYM
 | INVERSE_DIV_SYM
 | FACTORISE_SYM
 | BITWISE_AND_SYM
 | MISC_MULTIPLY_SYM

implicitMultiplyOp ::= specialLhs blockComment? IMPLICIT_MULTIPLY_SYM specialRhs
private specialLhs ::= integer | floatLit | symbol | string | regex | bracketedExpr
private specialRhs ::= symbol | string | charLit | integer | floatLit

// // .//
// level 12
private fractionLevel ::=
   fractionOp
 | inOp
 | isaOp

fractionOp ::= expr FRACTION_SYM endOfLine expr
inOp ::= expr (IN_KEYWORD | IN_SYM) endOfLine expr
isaOp::= expr ISA_KEYWORD expr
// ^ .^
private exponentLevel ::=
   miscExponentOp
 | exponentOp

exponentOp ::= expr EXPONENT_SYM endOfLine expr
miscExponentOp ::= expr MISC_EXPONENT_SYM endOfLine expr

// ::
// level 13.5
typeOp ::= expr DOUBLE_COLON endOfLine type

// level 15
private unaryLevel ::=
   unaryPlusOp
 | unaryMinusOp
 | unaryTypeOp
 | unarySubtypeOp
 | unaryInterpolateOp
 | notOp
 | bitWiseNotOp

bitWiseNotOp ::= BITWISE_NOT_SYM endOfLine expr
unaryTypeOp ::= DOUBLE_COLON endOfLine expr
unarySubtypeOp ::= SUBTYPE_SYM endOfLine expr
unaryMinusOp ::= MINUS_SYM endOfLine expr
unaryInterpolateOp ::= INTERPOLATE_SYM endOfLine expr
notOp ::= NOT_SYM endOfLine expr
unaryPlusOp ::= PLUS_SYM endOfLine expr?

private primaryExpr ::=
   string
 | command
 | regex
 | rawString
 | versionNumber
 | byteArray
 | charLit
 | integer
 | floatLit
 | booleanLit
 | ifExpr
 | forExpr
 | forComprehension
 | whileExpr
 | function
 | returnExpr
 | breakExpr
 | tryCatch
 | continueExpr
// | union
 | tuple
 | macro
 | let
 | block
 | colonBlock
 | export
 | importExpr
 | importAllExpr
 | using
 | abstractTypeDeclaration
 | primitiveTypeDeclaration
 | typeAlias
 | symbolLhs
 | symbol
 | macroSymbol
 | bracketedExpr
 | bracketedComprehensionExpr

// (a+b)
bracketedExpr ::=
 LEFT_BRACKET endOfLine
  (opAsSymbol | unaryOpAsSymbol)?
   statements endOfLine (COMMA_SYM endOfLine)? (FOR_KEYWORD expr IN_KEYWORD expr)*
 RIGHT_BRACKET

// (x for x in arr)
bracketedComprehensionExpr::=
	LEFT_BRACKET comprehensionElement+ RIGHT_BRACKET

whereClause ::= WHERE_KEYWORD afterWhere

private keywordsAsOp ::=
  ISA_KEYWORD | MODULE_KEYWORD | WHERE_KEYWORD | UNION_KEYWORD | IN_KEYWORD

private afterWhere ::=
   (symbol | LEFT_B_BRACKET symbol RIGHT_B_BRACKET)
    ((SUBTYPE_SYM) endOfLine symbol typeParameters?)?
 | (endOfLine LEFT_B_BRACKET endOfLine)
    (afterWhere (commaSep afterWhere)*)?
     COMMA_SYM? endOfLine
   RIGHT_B_BRACKET

array ::=
// empty array with typeName
 (symbol typeParameters? LEFT_M_BRACKET RIGHT_M_BRACKET)
// one-element array without typeName,
// and the one-element array with typeName will be regarded as applyIndex first.
 | (LEFT_M_BRACKET endOfLine expr commaSep? endOfLine RIGHT_M_BRACKET)
// common
 | (symbol? LEFT_M_BRACKET endOfLine
    (
     (expr (commaSep|endOfLine expr)+ (SEMICOLON_SYM? endOfLine expr)* COMMA_SYM?)
     |
     (expr (commaSep|endOfLine expr)* (SEMICOLON_SYM? endOfLine expr)+ SEMICOLON_SYM?)
     |
     (expr SEMICOLON_SYM)
    )?endOfLine
 RIGHT_M_BRACKET) { extends=expr }

//union ::= UNION_KEYWORD tuple { extends=expr }

tuple ::=
 LEFT_BRACKET endOfLine
  expr (commaSep expr)* endOfLine COMMA_SYM? endOfLine
 RIGHT_BRACKET { extends=expr }

private commaSep ::= endOfLine COMMA_SYM endOfLine
functionSignature ::=
 LEFT_BRACKET endOfLine
  (typedNamedVariable (commaSep typedNamedVariable)*)?
  (SEMICOLON_SYM endOfLine
   (typedNamedVariable (commaSep typedNamedVariable)*)?)?
  commaSep?
 RIGHT_BRACKET
 typeAnnotation?

untypedVariables ::=
 LEFT_BRACKET endOfLine
  (expr (commaSep expr)*)? endOfLine
 RIGHT_BRACKET

function ::=
 FUNCTION_KEYWORD endOfLine
  (SYM DOT_SYM)? // TODO
   (symbol|bracketedFunctionName)? // function Name
   (typeParameters endOfLine)?
   (functionSignature endOfLine)?
   (whereClause endOfLine)*
  <<lazyBlockNotParseEndImpl>>
 END_KEYWORD {
	pin=1
	extends=expr
	mixin='org.ice1000.julia.lang.psi.impl.JuliaFunctionMixin'
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaFunctionDeclaration']
}
private bracketedFunctionName ::= LEFT_BRACKET typedNamedVariable RIGHT_BRACKET

private typeModifiers ::= IMMUTABLE_KEYWORD | MUTABLE_KEYWORD
private typeKeywords ::= TYPE_KEYWORD | STRUCT_KEYWORD
typeDeclaration ::=
 (typeModifiers? typeKeywords | typeModifiers) endOfLine
  symbol typeParameters? (SUBTYPE_SYM endOfLine expr)? SEMICOLON_SYM? endOfLine
  <<lazyBlockNotParseEndImpl>>
 END_KEYWORD {
 	pin=1
	stubClass='org.ice1000.julia.lang.psi.JuliaTypeDeclarationClassStub'
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaTypeDeclaration']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaTypeDeclarationMixin'
}

abstractTypeDeclaration ::=
 ABSTRACT_KEYWORD TYPE_KEYWORD endOfLine
  symbol typeParameters? (SUBTYPE_SYM endOfLine expr)? endOfLine
 END_KEYWORD { pin=1 extends=expr }

primitiveTypeDeclaration ::=
 PRIMITIVE_KEYWORD TYPE_KEYWORD endOfLine
  symbol (SUBTYPE_SYM endOfLine expr)? expr endOfLine
 END_KEYWORD { pin=1 extends=expr }

macro ::=
 MACRO_KEYWORD endOfLine
    symbol endOfLine
   untypedVariables endOfLine
  <<lazyBlockNotParseEndImpl>>
 END_KEYWORD {
	pin=1
	extends=expr
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.julia.lang.psi.impl.DocStringOwner']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaMacroMixin'
}

let ::= LET_KEYWORD endOfLine assignLevelOp (commaSep assignLevelOp)* statements END_KEYWORD? { pin=1 extends=expr }

block ::= BEGIN_KEYWORD <<lazyBlockNotParseEndImpl>> END_KEYWORD { pin=1 }

colonBlock ::= COLON_BEGIN_SYM <<lazyBlockParseEndImpl>> RIGHT_BRACKET

doBlock ::= DO_KEYWORD <<lazyBlockNotParseEndImpl>> END_KEYWORD { pin=1 }

breakExpr ::= BREAK_KEYWORD

continueExpr ::= CONTINUE_KEYWORD

export ::=
 EXPORT_KEYWORD endOfLine
  memberAccess
  (commaSep memberAccess)* { pin=1 extends=expr }

importAllExpr ::=
 IMPORTALL_KEYWORD access { pin=1 extends=expr }

private imported ::= access (COLON_SYM endOfLine symbolAndMacroSymbol)? (commaSep access)*

importExpr ::= IMPORT_KEYWORD endOfLine imported { pin=1 extends=expr }
using ::= USING_KEYWORD endOfLine imported { pin=1 extends=expr }

ifExpr ::=
 IF_KEYWORD expr endOfLine
  statements
  elseIfClause*
  elseClause?
 END_KEYWORD{pin=1}

elseIfClause ::= ELSEIF_KEYWORD expr endOfLine
 statements{pin=1}

elseClause ::= ELSE_KEYWORD statements{pin=1}

forComprehension ::=
 LEFT_M_BRACKET endOfLine
  comprehensionElement+ endOfLine
 RIGHT_M_BRACKET {
	extends=expr
	mixin='org.ice1000.julia.lang.psi.impl.JuliaForComprehensionMixin'
}

comprehensionElement ::=
 endOfLine expr endOfLine
 (
  FOR_KEYWORD
  singleComprehension
   (commaSep singleComprehension)?)+ {
	mixin='org.ice1000.julia.lang.psi.impl.JuliaComprehensionElementMixin'
}

singleComprehension ::= indexer (IF_KEYWORD expr)? {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaSingleComprehensionMixin'
}

forExpr ::= FOR_KEYWORD endOfLine indexer (commaSep indexer)* statements END_KEYWORD {
	mixin='org.ice1000.julia.lang.psi.impl.JuliaLoopDeclarationMixin'
}
private indexer ::= multiIndexer | singleIndexer
private infixIndexer ::= IN_KEYWORD | IN_SYM | EQ_SYM
singleIndexer ::= symbol infixIndexer endOfLine expr
multiIndexer ::= tuple infixIndexer endOfLine expr

whileExpr ::=
 WHILE_KEYWORD endOfLine
  expr endOfLine
   whileLazyBlock
 END_KEYWORD { pin=1 extends=expr }
private whileLazyBlock::= <<lazyBlockNotParseEndImpl>>

returnExpr ::= RETURN_KEYWORD (expr (COMMA_SYM expr)*)?

tryCatch ::=
 TRY_KEYWORD endOfLine
  statements
 catchClause?
 finallyClause?
 END_KEYWORD { pin=1 extends=expr }

catchClause ::=
 CATCH_KEYWORD symbol? endOfLine
 statements {
	pin=1
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaCatchDeclarationMixin'
}

finallyClause ::=
 FINALLY_KEYWORD <<lazyBlockNotParseEndImpl>>{pin=1}

private typeAnnotationAsOp::=
	LEFT_BRACKET typeAnnotation RIGHT_BRACKET